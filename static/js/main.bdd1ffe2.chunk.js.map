{"version":3,"sources":["factories/Gameboard/Gameboard.js","factories/Ship/Ship.js","utils/Playerstate/PlayerState.js","components/Square/Square.js","components/Board/Board.js","factories/Player/Player.js","App.js","reportWebVitals.js","index.js"],"names":["Gameboard","placeShip","ship","board","newBoard","data","positions","position","name","shipInfo","isSunk","every","hits","includes","getLength","length","isVertical","Ship","hit","push","shipAttacks","updatePlayerStates","state","action","id","coordinates","shipPlacement","players","player","ships","health","opponent","coordinate","shot","shipKey","newShips","message","console","log","messageSent","value","remainingShips","winner","error","Square","clickable","attack","style","className","onClick","Board","props","Array","fill","map","index","start","rows","columnIndex","boardIndex","gameboard","renderRow","memo","Player","opponentsGameboard","recieveAttack","computerAttack","openSpots","Number","randomAttack","Math","floor","random","attackOpponent","randomOpenSpot","Game","useReducer","computer","human","game","setGame","useState","turn","setTurn","canClick","setCanClick","attackCoordinate","a","useEffect","setTimeout","remainingComputerShips","remainingHumanShips","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bdd1ffe2.chunk.js","sourcesContent":["const Gameboard = (() => {\r\n  const placeShip = (ship, board) => {\r\n    \r\n    // Does not mutate the board, not sure which I want at this point\r\n    const newBoard = [...board]\r\n    for (let position of ship.data.positions) {\r\n      newBoard[position] = {...board[position], ship: ship.data.name}\r\n    }\r\n    return newBoard;\r\n\r\n    // mutates the board\r\n    // for (let position of ship.data.positions) {\r\n    //   board[position].ship = ship.data.name;\r\n    // }\r\n    // return board;\r\n  }\r\n\r\n  const recieveAttack = (position, board) => {\r\n    const newBoard = [...board]\r\n    newBoard[position].shot = true;\r\n  //   return board[position].ship\r\n  //     ? true\r\n  //     : false;\r\n    // console.log(board[position].ship)\r\n\r\n    return {\r\n      board: newBoard,\r\n      isShip: board[position].ship\r\n    }\r\n  }\r\n\r\n\r\n\r\n  return { placeShip }\r\n})();\r\n\r\nexport default Gameboard;","// const shipInfo = (data) => ({\r\n//   isSunk: () => data.positions.every(position => data.hits.includes(position)),\r\n//   getLength: () => data.positions.length,\r\n//   isVertical: () => data.isVertical,\r\n// })\r\n\r\n// const shipAttacks = (data) => ({\r\n//   // hit isn't validating, expecting gameboard to manage that\r\n//   hit: (position) => {\r\n//     data.hits.push(position);\r\n//     data.isSunk = shipInfo(data).isSunk()\r\n//     // return data.name;\r\n//   },\r\n// })\r\n\r\n\r\n// const Ship = (name, positions) => {\r\n//   const data = {\r\n//     name,\r\n//     positions,\r\n//     hits: [],\r\n//     isSunk: false\r\n//   }\r\n\r\n//   return {\r\n//     data,\r\n//     ...shipAttacks(data),\r\n//     ...shipInfo(data),\r\n//   }\r\n// }\r\n\r\nconst shipInfo = (data) => ({\r\n  isSunk: () => data.positions.every(position => data.hits.includes(position)),\r\n  getLength: () => data.positions.length,\r\n  isVertical: () => data.isVertical,\r\n})\r\n\r\nconst shipAttacks = (data) => ({\r\n  // hit isn't validating, expecting gameboard to manage that\r\n  hit: (position) => {\r\n    data.hits.push(position);\r\n    data.isSunk = shipInfo(data).isSunk()\r\n    // return data.name;\r\n  },\r\n})\r\n\r\n\r\nconst Ship = (name, positions) => {\r\n  const data = {\r\n    name,\r\n    positions,\r\n  }\r\n\r\n  return {\r\n    data,\r\n    ...shipAttacks(data),\r\n    ...shipInfo(data),\r\n  }\r\n}\r\n\r\nexport default Ship;","import Gameboard from '../../factories/Gameboard/Gameboard';\r\nimport Ship from '../../factories/Ship/Ship';\r\n\r\nconst updatePlayerStates = (state, action) => {\r\n  switch (action.id) {\r\n    case \"PLACE_SHIP\": {\r\n               \r\n      const { name, coordinates } = action;\r\n      const ship = Ship(name, coordinates)\r\n      const shipPlacement = {\r\n        ...state.players[action.player].ships,\r\n        [ship.data.name]: {\r\n          name: name,\r\n          health: coordinates.length,\r\n        }\r\n      }\r\n      const newBoard = Gameboard.placeShip(ship, state.players[action.player].board)\r\n      return {\r\n        ...state,\r\n        players: {\r\n          ...state.players,\r\n          [action.player]: {\r\n            ...state.players[action.player],\r\n            board: newBoard,\r\n            ships: shipPlacement\r\n          }\r\n        },\r\n      };\r\n    }\r\n    case \"ATTACK_SQUARE\": {\r\n      const {opponent, coordinate} = action;\r\n      const newBoard = [...state.players[opponent].board]\r\n      newBoard[coordinate].shot = true;\r\n      return {\r\n        ...state,\r\n        players: {\r\n          ...state.players,\r\n          [opponent]: {\r\n            ...state.players[opponent],\r\n            board: newBoard\r\n          }\r\n        }\r\n      }\r\n    }\r\n    case \"ATTACK_SHIP\": {\r\n      const {opponent, coordinate} = action;\r\n      const shipKey = state.players[opponent].board[coordinate].ship;\r\n      const ship = state.players[opponent].ships[shipKey];\r\n      const newShips = {\r\n        ...state.players[opponent].ships,\r\n        [shipKey]: {\r\n          ...ship,\r\n          health: ship.health -1\r\n        }\r\n      }\r\n      if (newShips[shipKey].health === 0) {\r\n        newShips[shipKey].isSunk = true;\r\n      }\r\n      return {\r\n        ...state,\r\n        players: {\r\n          ...state.players,\r\n          [opponent]: {\r\n            ...state.players[opponent],\r\n            ships: newShips,\r\n          }\r\n        }\r\n      }\r\n    }\r\n    case \"SEND_MESSAGE\": {\r\n      return {\r\n        ...state,\r\n        message: action.message\r\n      }\r\n    }\r\n    case \"SUNK_MESSAGE_SENT\": {\r\n      const { player: opponent, shipKey } = action;\r\n      const ship = state.players[opponent].ships[shipKey];\r\n      console.log(ship)\r\n      const newShips = {\r\n        ...state.players[opponent].ships,\r\n        [shipKey]: {\r\n          ...ship,\r\n          messageSent: true\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        players: {\r\n          ...state.players,\r\n          [opponent]: {\r\n            ...state.players[opponent],\r\n            ships: newShips,\r\n          }\r\n        }\r\n      }\r\n    }\r\n    case \"UPDATE_REMAINING_SHIPS\": {\r\n      const { player: opponent, value } = action;\r\n      return {\r\n        ...state,\r\n        players: {\r\n          ...state.players,\r\n          [opponent]:{\r\n            ...state.players[opponent],\r\n            remainingShips: state.players[opponent].remainingShips + value\r\n          }\r\n        }\r\n      };\r\n    }\r\n    case \"UPDATE_WINNER\": {\r\n      return {\r\n        ...state,\r\n        winner: action.winner\r\n      };\r\n    }\r\n    default:\r\n      console.log(\"BAD ACTION ID\")\r\n      console.error(\"BAD ACTION ID\")\r\n  }\r\n\r\n}\r\n\r\nexport default updatePlayerStates;","import React from 'react';\r\n\r\nconst Square = ({ clickable, attack, coordinate, position, ships }) => {\r\n  // console.log()\r\n  const {shot, ship} = position;\r\n  let style = {}\r\n\r\n  if (!ship) {\r\n    if(shot) {\r\n      style['backgroundColor'] = 'gray';\r\n    } else {\r\n      style['backgroundColor'] = 'white';\r\n    }\r\n  } else if (ship) {\r\n    style['backgroundColor'] = 'blue';\r\n    if (shot) {\r\n      style['backgroundColor'] = 'red';\r\n      if (ships[ship].isSunk) {\r\n        style['backgroundColor'] = 'black';\r\n      }\r\n    }\r\n  }\r\n\r\n  if (clickable ===false || shot) {\r\n    style['pointerEvents'] = 'none';\r\n  }\r\n  \r\n  return (\r\n    <button\r\n      className=\"square\"\r\n      style={style}\r\n      // onClick={() => console.log(position)}\r\n      onClick={() => attack(coordinate)}\r\n    >\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default Square;","import { memo } from 'react';\r\nimport Square from '../Square/Square';\r\n\r\nconst Board = (props) => {\r\n  const renderRow = (index) => {\r\n    const start = index * 10;\r\n    const rows = Array(10)\r\n    .fill(null)\r\n    .map((value, columnIndex) => {\r\n      const boardIndex = start+columnIndex;\r\n      return <Square \r\n        key={boardIndex}\r\n        coordinate={boardIndex}\r\n        attack={props.attack}\r\n        clickable={props.clickable}\r\n        ships={props.ships}\r\n        position={props.gameboard[boardIndex]}\r\n      />\r\n    })\r\n\r\n    return (\r\n      <div\r\n        key={index}\r\n        className=\"board-row\"\r\n      >\r\n        {rows}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"board\">\r\n      {/* {columns.map((value, index) => renderRow(value, index))} */}\r\n      {Array(10).fill(null).map((value, index) => renderRow(index))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default memo(Board);","\r\nconst attackOpponent = () => ({\r\n  attack: (opponentsGameboard, coordinate) => {\r\n    if (opponentsGameboard.board[coordinate].shot === true) return;\r\n    return opponentsGameboard.recieveAttack(coordinate);\r\n  }\r\n})\r\n\r\nconst computerAttackOpponent = () => ({\r\n  computerAttack: (opponentsGameboard) => {\r\n    // let openSpots = opponentsGameboard.board.map((value, index) => {\r\n    //   if (value.shot || value.ship) {\r\n    //     return value;\r\n    //   }\r\n    //   return index;\r\n    // })\r\n    let openSpots = [];\r\n    for (let index in opponentsGameboard.board) {\r\n      if(!opponentsGameboard.board[index].shot) {\r\n        openSpots.push(Number(index))\r\n      }\r\n    }\r\n    const randomIndex = Math.floor(Math.random() * openSpots.length);\r\n    const randomAttack = openSpots[randomIndex]\r\n    return [attackOpponent().attack(opponentsGameboard, randomAttack), randomAttack]\r\n  },\r\n  randomOpenSpot: (opponentsGameboard) => {\r\n    let openSpots = [];\r\n    for (let index in opponentsGameboard) {\r\n      if(!opponentsGameboard[index].shot) {\r\n        openSpots.push(Number(index))\r\n      }\r\n    }\r\n    const randomIndex = Math.floor(Math.random() * openSpots.length);\r\n    const randomAttack = openSpots[randomIndex];\r\n    return randomAttack;\r\n  }\r\n\r\n})\r\n\r\n\r\nconst Player = (name) => {\r\n  const data = {\r\n    name,\r\n  }\r\n  return {\r\n    data,\r\n    ...attackOpponent(),\r\n    ...computerAttackOpponent()\r\n  }\r\n}\r\n\r\nexport default Player;","import './App.css';\r\nimport ShipTypes from './factories/Ship/ShipTypes';\r\nimport updatePlayerStates from './utils/Playerstate/PlayerState'\r\nimport Board from './components/Board/Board';\r\nimport Player from './factories/Player/Player'\r\nimport { useState, useEffect, useReducer} from 'react';\r\n\r\n\r\n\r\nconst Game = () => {\r\n  const [ game, setGame ] = useReducer(\r\n    updatePlayerStates,\r\n    {\r\n      players: {\r\n        computer: {\r\n          name: \"HAL900\",\r\n          board: Array(100).fill(null).map((value, index) =>({shot: false, ship: false})),\r\n          ships: {},\r\n          remainingShips: 0,\r\n        },\r\n        human: {\r\n          name: \"Joel\",\r\n          board: Array(100).fill(null).map((value, index) =>({shot: false, ship: false})),\r\n          ships: {},\r\n          remainingShips: 0,\r\n        },\r\n      },\r\n      message: '',\r\n      winner: '',\r\n    }\r\n  )\r\n  const [ turn, setTurn ] = useState(0);\r\n  const [ canClick, setCanClick ] = useState(true);\r\n\r\n  const attackCoordinate = async (coordinate) => {\r\n    if (game.winner) {\r\n      setCanClick(false);\r\n      return;\r\n    };\r\n    setGame({id: \"ATTACK_SQUARE\", coordinate, opponent: 'computer'})\r\n    if (game.players.computer.board[coordinate].ship) {\r\n      setGame({id: \"SEND_MESSAGE\", message: \"Hit Enemy Ship!\"})\r\n      setGame({id: \"ATTACK_SHIP\", coordinate, opponent: 'computer'})\r\n    } else {\r\n      setGame({id: \"SEND_MESSAGE\", message: \"Miss!\"})\r\n    }\r\n    setCanClick(false);\r\n  }\r\n  \r\n  useEffect(() => {\r\n    // just so it doesn't replace them everytime it re-compiles\r\n    if (game.players.computer.board[0].ship !== false) return;\r\n    setGame({id: \"PLACE_SHIP\", player: 'computer', name: 'Carrier', coordinates: [0,1,2,3,4]})\r\n    setGame({id: \"PLACE_SHIP\", player: 'computer', name: 'Battleship', coordinates: [42,43,44,45]})\r\n    setGame({id: \"PLACE_SHIP\", player: 'computer', name: 'Destoyer', coordinates: [96,97,98]})\r\n    setGame({id: \"PLACE_SHIP\", player: 'computer', name: 'Submarine', coordinates: [64,65,66]})\r\n    setGame({id: \"PLACE_SHIP\", player: 'computer', name: 'Patrol Boat', coordinates: [22,23]})\r\n    // should increment on each ship not sure if in own switch or together but hacked together for testing now\r\n    setGame({id: 'UPDATE_REMAINING_SHIPS', player: 'computer', value: 5})\r\n\r\n\r\n    setGame({id: \"PLACE_SHIP\", player: 'human', name: 'Carrier', coordinates: [0,1,2,3,4]})\r\n    setGame({id: \"PLACE_SHIP\", player: 'human', name: 'Battleship', coordinates: [42,43,44,45]})\r\n    setGame({id: \"PLACE_SHIP\", player: 'human', name: 'Destoyer', coordinates: [96,97,98]})\r\n    setGame({id: \"PLACE_SHIP\", player: 'human', name: 'Submarine', coordinates: [64,65,66]})\r\n    setGame({id: \"PLACE_SHIP\", player: 'human', name: 'Patrol Boat', coordinates: [22,23]})\r\n    setGame({id: 'UPDATE_REMAINING_SHIPS', player: 'human', value: 5})\r\n\r\n  },[])\r\n  \r\n  useEffect(() => {\r\n    for (let shipKey in game.players.computer.ships) {\r\n      const ship = game.players.computer.ships[shipKey]\r\n      if (ship.isSunk && !ship.messageSent) {\r\n        setGame({id: \"UPDATE_REMAINING_SHIPS\", player: 'computer', value: -1})\r\n        setGame({id: \"SEND_MESSAGE\", message: `Sunk enemy ${shipKey}`})\r\n        setGame({id: \"SUNK_MESSAGE_SENT\", player: 'computer', shipKey})\r\n      }\r\n    }\r\n  },[game.players.computer.ships])\r\n  \r\n  useEffect(() => {\r\n    for (let shipKey in game.players.human.ships) {\r\n      const ship = game.players.human.ships[shipKey]\r\n      if (ship.isSunk && !ship.messageSent) {\r\n        setGame({id: \"UPDATE_REMAINING_SHIPS\", player: 'human', value: -1})\r\n        setGame({id: \"SEND_MESSAGE\", message: `They Sunk my ${shipKey}`})\r\n        setGame({id: \"SUNK_MESSAGE_SENT\", player: 'human', shipKey})\r\n      }\r\n    }\r\n  },[game.players.human.ships])\r\n  \r\n  useEffect(() => {\r\n    if (canClick || game.winner) return;\r\n    setTimeout(() => {\r\n      setCanClick(true);\r\n      setTurn((turn) =>turn+1);\r\n    }, 1000)\r\n\r\n  },[canClick])\r\n\r\n  useEffect(() => {\r\n    if (turn < 1 || game.winner) return;\r\n    const p = Player()\r\n    const coordinate = p.randomOpenSpot(game.players.human.board)\r\n    setGame({id: \"ATTACK_SQUARE\", coordinate, opponent: 'human'})\r\n    if (game.players.human.board[coordinate].ship) {\r\n      setGame({id: \"SEND_MESSAGE\", message: \"Enemy hit my Ship!\"})\r\n      setGame({id: \"ATTACK_SHIP\", coordinate, opponent: 'human'})\r\n    } else {\r\n      setGame({id: \"SEND_MESSAGE\", message: \"Miss!\"})\r\n    }\r\n  },[turn])\r\n\r\n  useEffect(() => {\r\n    if (turn < 1 || game.winner) return;\r\n    const { remainingShips:remainingComputerShips } = game.players.computer;\r\n    const { remainingShips:remainingHumanShips } = game.players.human;\r\n    console.log(remainingComputerShips, remainingHumanShips)\r\n    if (remainingComputerShips === 0 || remainingHumanShips === 0) {\r\n      const winner = remainingComputerShips ? 'computer': 'human';\r\n      setGame({id: 'UPDATE_WINNER', winner})\r\n      setGame({id: 'SEND_MESSAGE', message: `${winner} wins!`})\r\n\r\n    }\r\n  },[game.players.computer.remainingShips, game.players.human.remainingShips])\r\n\r\n  \r\n  return (\r\n    <div>\r\n      <p>{game.message}</p>\r\n      <Board\r\n          gameboard={game.players.human.board}\r\n          ships={game.players.human.ships}\r\n          clickable={false}\r\n      />\r\n      <Board\r\n          gameboard={game.players.computer.board}\r\n          attack={attackCoordinate}\r\n          ships={game.players.computer.ships}\r\n          clickable={canClick}\r\n      />\r\n    </div>\r\n    );\r\n}\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Game />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}