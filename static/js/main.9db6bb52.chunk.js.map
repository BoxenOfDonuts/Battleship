{"version":3,"sources":["factories/Ship/ShipTypes.js","components/Square/Square.js","components/Board/Board.js","factories/Gameboard/Gameboard.js","components/Header/Header.js","components/Messageboard/MessageBoard.js","factories/Ship/Ship.js","utils/Playerstate/PlayerState.js","App.js","reportWebVitals.js","index.js"],"names":["ShipTypes","name","length","Square","handleClick","handleHover","isHovering","coordinate","position","ships","hideShips","shot","ship","classname","marker","hitShot","height","width","cx","cy","r","stroke","strokeWidth","fill","missedShot","includes","isSunk","leftEdge","rightEdge","className","onMouseEnter","onClick","Board","props","clickable","Array","map","value","index","start","rows","columnIndex","boardIndex","gameboard","onHover","renderRow","memo","Gameboard","validPlacement","coordinates","board","end","badPositions","forEach","push","isValidMovement","direction","randomOpenSpot","opponentsGameboard","openSpots","Number","Math","floor","random","placeShip","newBoard","data","positions","randomCoordinates","shipType","loopCatch","randomSpots","increment","i","determineGuessDirection","didHit","originalHit","Header","header","headerArray","from","letter","MessageBoard","message","shipInfo","every","hits","getLength","isVertical","Ship","hit","shipAttacks","updatePlayerStates","state","action","id","shipPlacement","players","player","health","opponent","shipKey","newShips","messageSent","remainingShips","winner","started","init","console","log","error","computer","human","Game","useState","turn","setTurn","canClick","setCanClick","inventory","setInventory","setIsHovering","setIsVertical","lastAttempt","setLastAttempt","useReducer","game","setGame","shipSank","attackCoordinate","unshift","useEffect","prevState","remainingComputerShips","remainingHumanShips","button","newInventory","slice","movement","setTimeout","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9db6bb52.chunk.js","sourcesContent":["const ShipTypes = [\n  {\n    name: 'Carrier',\n    length: 5,\n  },\n  {\n    name: 'Battleship',\n    length: 4,\n  },\n  {\n    name: 'Destroyer',\n    length: 3,\n  },\n  {\n    name: 'Submarine',\n    length: 3,\n  },\n  {\n    name: 'Patrol Boat',\n    length: 2,\n  },\n];\n\nexport default ShipTypes;\n","import React from 'react';\nimport './Square.css';\n\nconst Square = ({\n  handleClick,\n  handleHover,\n  isHovering = [],\n  coordinate,\n  position,\n  ships,\n  hideShips,\n}) => {\n  const { shot, ship } = position;\n  let classname = 'square';\n  let marker = '';\n\n  const hitShot = (\n    <svg height=\"40\" width=\"40\">\n      <circle\n        cx=\"20\"\n        cy=\"20\"\n        r=\"12\"\n        stroke=\"black\"\n        strokeWidth=\"1\"\n        fill=\"red\"\n      />\n    </svg>\n  );\n\n  const missedShot = (\n    <svg height=\"40\" width=\"40\">\n      <circle\n        cx=\"20\"\n        cy=\"20\"\n        r=\"12\"\n        stroke=\"black\"\n        strokeWidth=\"1\"\n        fill=\"white\"\n      />\n    </svg>\n  );\n\n  if (isHovering) {\n    classname += isHovering.includes(coordinate) ? ' hover-ship' : '';\n  }\n\n  classname += shot ? ' no-click' : '';\n\n  if (ship) {\n    classname += hideShips && !ships[ship].isSunk ? ' hidden' : ' ship';\n\n    classname += ships[ship].isSunk ? ' sunk' : '';\n\n    marker = shot ? hitShot : '';\n\n    if (ships[ship].leftEdge.includes(coordinate)) {\n      classname += ' left-edge';\n    } \n    if (ships[ship].rightEdge.includes(coordinate)) {\n      classname += ' right-edge';\n    }\n  } else {\n    marker = shot ? missedShot : '';\n  }\n\n  const hoverPositions = () => {\n    if (!handleHover) return;\n\n    handleHover(coordinate);\n  };\n\n  return (\n    <div\n      className={classname}\n      onMouseEnter={hoverPositions}\n      onClick={() => handleClick(coordinate)}\n    >\n      {marker}\n    </div>\n  );\n};\n\nexport default Square;\n","import { memo } from 'react';\nimport Square from '../Square/Square';\n\nconst Board = (props) => {\n  let classname = 'board';\n\n  classname += props.clickable ? '' : ' no-click';\n\n  const renderRow = (index) => {\n    const start = index * 10;\n    const rows = Array(10)\n      .fill(null)\n      .map((value, columnIndex) => {\n        const boardIndex = start + columnIndex;\n        return (\n          <Square\n            key={boardIndex}\n            coordinate={boardIndex}\n            handleClick={props.onClick}\n            clickable={props.clickable}\n            ships={props.ships}\n            position={props.gameboard[boardIndex]}\n            hideShips={props.hideShips}\n            handleHover={props.onHover}\n            isHovering={props.isHovering}\n          />\n        );\n      });\n\n    return (\n      <div key={index} className=\"board-row\">\n        {rows}\n      </div>\n    );\n  };\n\n  return (\n    <div className={classname}>\n      {Array(10)\n        .fill(null)\n        .map((value, index) => renderRow(index))}\n    </div>\n  );\n};\n\nexport default memo(Board);\n","const Gameboard = (() => {\n  const placeShip = (ship, board) => {\n    // Does not mutate the board, not sure which I want at this point\n    const newBoard = [...board];\n    for (let position of ship.data.positions) {\n      newBoard[position] = { ...board[position], ship: ship.data.name };\n    }\n    return newBoard;\n  };\n\n  const validPlacement = (coordinates, board) => {\n    // const { positions } = ship.data;\n    const start = coordinates[0];\n    const end = coordinates[coordinates.length - 1];\n    if ((start % 10 === 9 && start % 10 !== end % 10) || end % 10 < start % 10 || end > 99) {\n      return false;\n    }\n    // for too close to another ship\n    const badPositions = [];\n    board.forEach((value, index) => {\n      if (value.ship) {\n        badPositions.push(index, index - 10, index + 10);\n        if (!(index % 10 === 9)) {\n          badPositions.push(index + 1, index + 11, index - 9);\n        }\n        if (!(index % 10 === 0)) {\n          badPositions.push(index - 1, index - 11, index + 9);\n        }\n      }\n    });\n\n    for (const value of coordinates) {\n      if (badPositions.includes(value)) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  const randomCoordinates = (shipType, board) => {\n    let loopCatch = 0;\n    const randomSpots = (shipType) => {\n      const coordinate = Math.floor(Math.random() * 98);\n      const directions = [1, 10];\n      const increment = directions[Math.floor(Math.random() * 2)];\n      const coordinates = [coordinate];\n      for (let i = 1; i < shipType.length; i++) {\n        coordinates.push(coordinate + (i * increment));\n      }\n      return coordinates;\n    };\n    let coordinates = randomSpots(shipType);\n    while (!validPlacement(coordinates, board) && loopCatch < 11) {\n      coordinates = randomSpots(shipType);\n      loopCatch++;\n    }\n\n    return coordinates;\n  };\n\n  const isValidMovement = (board, position, direction) => {\n    if (position + direction > 99 || position + direction  < 0) {\n      // console.log('out of bounds')\n      return false;\n    } else if (board[position + direction].shot) {\n      // console.log('already shot')\n      return false;\n    } else if (position % 10 === 0 && direction === -1) {\n      // console.log('wraps left')\n      return false;\n    } else if (position % 10 === 9 && direction === 1) {\n      // console.log('wraps right')\n      return false;\n    }\n    return true;\n  };\n\n  const determineGuessDirection = (board, didHit, positions, direction) => {\n    const originalHit = positions[positions.length -1];\n    if (\n      didHit &&\n      isValidMovement(\n      board,\n      positions[0],\n      direction\n    )\n    ) {\n      return [direction, positions[0] + direction];\n      // ugh, remove !hit ?\n    } else if (positions.length > 0) {\n      if (isValidMovement(board, originalHit, 1)) {\n        return [1, originalHit + 1];\n      } else if (isValidMovement(board, originalHit, 10)) {\n        return [10, originalHit + 10];\n      } else if (isValidMovement(board, originalHit, -10)) {\n        return [-10, originalHit -10];\n      }\n    }\n\n    const randomCoordinate = randomOpenSpot(board)\n\n    return [-1, randomCoordinate] ;\n  }\n\n  const randomOpenSpot = (opponentsGameboard) => {\n    let openSpots = [];\n    for (let index in opponentsGameboard) {\n      if (!opponentsGameboard[index].shot) {\n        openSpots.push(Number(index));\n      }\n    }\n    const randomIndex = Math.floor(Math.random() * openSpots.length);\n    const randomAttack = openSpots[randomIndex];\n    return randomAttack;\n  }\n\n  return {\n    placeShip,\n    validPlacement,\n    randomCoordinates,\n    determineGuessDirection\n  };\n\n})();\n\nexport default Gameboard;\n","import './Header.css';\n\nconst Header = ({ header }) => {\n  const headerArray = Array.from(header).map((letter, index) => {\n    return <span key={letter + index}>{letter}</span>;\n  });\n\n  return (\n    <div className=\"header\">\n      <h1>{headerArray}</h1>\n    </div>\n  );\n};\n\nexport default Header;\n","import './MessageBoard.css';\n\nconst MessageBoard = ({ message }) => {\n  return (\n    <div className=\"messages\">\n      <p>{message}</p>\n    </div>\n  );\n};\n\nexport default MessageBoard;\n","// const shipInfo = (data) => ({\n//   isSunk: () => data.positions.every(position => data.hits.includes(position)),\n//   getLength: () => data.positions.length,\n//   isVertical: () => data.isVertical,\n// })\n\n// const shipAttacks = (data) => ({\n//   // hit isn't validating, expecting gameboard to manage that\n//   hit: (position) => {\n//     data.hits.push(position);\n//     data.isSunk = shipInfo(data).isSunk()\n//     // return data.name;\n//   },\n// })\n\n// const Ship = (name, positions) => {\n//   const data = {\n//     name,\n//     positions,\n//     hits: [],\n//     isSunk: false\n//   }\n\n//   return {\n//     data,\n//     ...shipAttacks(data),\n//     ...shipInfo(data),\n//   }\n// }\n\nconst shipInfo = (data) => ({\n  isSunk: () =>\n    data.positions.every((position) => data.hits.includes(position)),\n  getLength: () => data.positions.length,\n  isVertical: () => data.isVertical,\n});\n\nconst shipAttacks = (data) => ({\n  // hit isn't validating, expecting gameboard to manage that\n  hit: (position) => {\n    data.hits.push(position);\n    data.isSunk = shipInfo(data).isSunk();\n    // return data.name;\n  },\n});\n\nconst Ship = (name, positions) => {\n  const data = {\n    name,\n    positions,\n  };\n\n  return {\n    data,\n    ...shipAttacks(data),\n    ...shipInfo(data),\n  };\n};\n\nexport default Ship;\n","import Gameboard from '../../factories/Gameboard/Gameboard';\nimport Ship from '../../factories/Ship/Ship';\n\nconst updatePlayerStates = (state, action) => {\n  switch (action.id) {\n    case 'PLACE_SHIP': {\n      const { name, coordinates, isVertical } = action;\n      const ship = Ship(name, coordinates);\n      let leftEdge = '';\n      let rightEdge = '';\n      if (isVertical) {\n        leftEdge = coordinates;\n        rightEdge = coordinates;\n      } else {\n        leftEdge = [coordinates[0]];\n        rightEdge = [coordinates[coordinates.length - 1]];\n      }\n      const shipPlacement = {\n        ...state.players[action.player].ships,\n        [ship.data.name]: {\n          name: name,\n          health: coordinates.length,\n          leftEdge,\n          rightEdge,\n        },\n      };\n      const newBoard = Gameboard.placeShip(\n        ship,\n        state.players[action.player].board\n      );\n      return {\n        ...state,\n        players: {\n          ...state.players,\n          [action.player]: {\n            ...state.players[action.player],\n            board: newBoard,\n            ships: shipPlacement,\n          },\n        },\n      };\n    }\n    case 'ATTACK_SQUARE': {\n      const { opponent, coordinate } = action;\n      const newBoard = [...state.players[opponent].board];\n      newBoard[coordinate].shot = true;\n      return {\n        ...state,\n        players: {\n          ...state.players,\n          [opponent]: {\n            ...state.players[opponent],\n            board: newBoard,\n          },\n        },\n      };\n    }\n    case 'ATTACK_SHIP': {\n      const { opponent, coordinate } = action;\n      const shipKey = state.players[opponent].board[coordinate].ship;\n      const ship = state.players[opponent].ships[shipKey];\n      const newShips = {\n        ...state.players[opponent].ships,\n        [shipKey]: {\n          ...ship,\n          health: ship.health - 1,\n        },\n      };\n      if (newShips[shipKey].health === 0) {\n        newShips[shipKey].isSunk = true;\n      }\n      return {\n        ...state,\n        players: {\n          ...state.players,\n          [opponent]: {\n            ...state.players[opponent],\n            ships: newShips,\n          },\n        },\n      };\n    }\n    case 'SEND_MESSAGE': {\n      return {\n        ...state,\n        message: action.message,\n      };\n    }\n    case 'SUNK_MESSAGE_SENT': {\n      const { player: opponent, shipKey } = action;\n      const ship = state.players[opponent].ships[shipKey];\n      const newShips = {\n        ...state.players[opponent].ships,\n        [shipKey]: {\n          ...ship,\n          messageSent: true,\n        },\n      };\n      return {\n        ...state,\n        players: {\n          ...state.players,\n          [opponent]: {\n            ...state.players[opponent],\n            ships: newShips,\n          },\n        },\n      };\n    }\n    case 'UPDATE_REMAINING_SHIPS': {\n      const { player: opponent, value } = action;\n      return {\n        ...state,\n        players: {\n          ...state.players,\n          [opponent]: {\n            ...state.players[opponent],\n            remainingShips: state.players[opponent].remainingShips + value,\n          },\n        },\n      };\n    }\n    case 'UPDATE_WINNER': {\n      return {\n        ...state,\n        winner: action.winner,\n      };\n    }\n    case 'GAME_START': {\n      return {\n        ...state,\n        started: action.started,\n      };\n    }\n    case 'RESET': {\n      return init();\n    }\n    default:\n      console.log('BAD ACTION ID');\n      console.error('BAD ACTION ID');\n  }\n};\n\nconst init = () => {\n  const initialState = {\n    players: {\n      computer: {\n        name: 'HAL900',\n        board: Array(100)\n          .fill(null)\n          .map((value, index) => ({ shot: false, ship: false })),\n        ships: {},\n        remainingShips: 0,\n      },\n      human: {\n        name: 'Player',\n        board: Array(100)\n          .fill(null)\n          .map((value, index) => ({ shot: false, ship: false })),\n        ships: {},\n        remainingShips: 0,\n      },\n    },\n    message: 'Click on the board to place your ships',\n    winner: '',\n    started: false,\n  };\n  return initialState;\n};\n\nexport { updatePlayerStates, init };\n","import './App.css';\nimport ShipTypes from './factories/Ship/ShipTypes';\nimport Board from './components/Board/Board';\nimport Gameboard from './factories/Gameboard/Gameboard';\nimport Header from './components/Header/Header';\nimport MessageBoard from './components/Messageboard/MessageBoard';\nimport { updatePlayerStates, init } from './utils/Playerstate/PlayerState';\nimport { useState, useEffect, useReducer } from 'react';\n\nconst Game = () => {\n  const [turn, setTurn] = useState(0);\n  const [canClick, setCanClick] = useState(true);\n  const [inventory, setInventory] = useState(ShipTypes);\n  const [isHovering, setIsHovering] = useState([]);\n  const [ isVertical, setIsVertical ] = useState(false);\n  const [lastAttempt, setLastAttempt] = useState({\n    hit: false,\n    positions: [],\n    direction: -1,\n  });\n  const [game, setGame] = useReducer(updatePlayerStates, init(), init);\n\n  const shipSank = (player, ship) => {\n    const message =\n      player === 'computer' ? `Sank enemy ${ship}` : `They sank my ${ship}`;\n    setGame({ id: 'UPDATE_REMAINING_SHIPS', player, value: -1 });\n    setGame({ id: 'SEND_MESSAGE', message });\n    setGame({ id: 'SUNK_MESSAGE_SENT', player, shipKey: ship });\n  };\n\n  const attackCoordinate = (opponent, coordinate) => {\n    const message =\n      opponent === 'computer' ? 'Hit Enemy Ship!' : 'Enemy hit my Ship!';\n\n    setGame({ id: 'ATTACK_SQUARE', coordinate, opponent });\n    if (game.players[opponent].board[coordinate].ship) {\n      if (opponent === 'human') {\n        const positions = lastAttempt.positions;\n        if (lastAttempt.direction === -1) {\n          positions.unshift(coordinate);\n        } else {\n          positions.unshift(coordinate);\n        }\n        setLastAttempt({ ...lastAttempt, hit: true, positions });\n      }\n      setGame({ id: 'SEND_MESSAGE', message });\n      setGame({ id: 'ATTACK_SHIP', coordinate, opponent });\n    } else {\n      setGame({ id: 'SEND_MESSAGE', message: 'Miss!' });\n      if (opponent === 'human') {\n        setLastAttempt({ ...lastAttempt, hit: false });\n      }\n    }\n  };\n\n  const resetGame = () => {\n    setTurn(0);\n    setCanClick(true);\n    setInventory(ShipTypes);\n    setLastAttempt({\n      hit: false,\n      positions: [],\n      direction: -1,\n    });\n    setGame({ id: 'RESET' });\n  };\n\n  const handleBoardClick = (coordinate) => {\n    if (game.winner || game.players.computer.board[coordinate].shot) return;\n    attackCoordinate('computer', coordinate);\n    setCanClick(false);\n    setTimeout(() => {\n      setCanClick(true);\n      setTurn((turn) => turn + 1);\n    }, 1);\n  };\n\n  const placeShips = (coordinate) => {\n    if (game.started) return;\n    const newInventory = inventory.slice(1, inventory.length);\n    const ship = inventory[0];\n    const coordinates = [coordinate];\n    const movement = isVertical ? 10 : 1;\n    for (let i = 1; i < ship.length; i++) {\n      coordinates.push(coordinate + (i * movement));\n    }\n    if (!Gameboard.validPlacement(coordinates, game.players.human.board))\n      return;\n    setInventory(newInventory);\n    setGame({\n      id: 'PLACE_SHIP',\n      player: 'human',\n      name: ship.name,\n      coordinates,\n      isVertical,\n    });\n    setGame({ id: 'UPDATE_REMAINING_SHIPS', player: 'human', value: 1 });\n    if (newInventory.length === 0) {\n      setGame({ id: 'GAME_START', started: true });\n      setGame({ id: 'SEND_MESSAGE', message: 'Game Start!' });\n      setIsHovering([]);\n    }\n  };\n\n  const handleHoverEffects = (coordinate) => {\n    if (game.started) return;\n    const ship = inventory[0];\n    const coordinates = [coordinate];\n    const movement = isVertical ? 10 : 1;\n    if (isVertical) {\n      for (let i = 1; i < ship.length; i++) {\n        coordinates.push(coordinate + (i * movement));\n      }\n    } else {\n      for (let i = 1; i < ship.length && (coordinate + i) % 10 !== 0; i++) {\n        coordinates.push(coordinate + (i * movement));\n      }\n    }\n    setIsHovering(coordinates);\n  };\n\n  useEffect(() => {\n    if (game.started || inventory.length === 0) return;\n    const ship = inventory[0];\n    const coordinates = Gameboard.randomCoordinates(\n      ship,\n      game.players.computer.board\n    );\n    const isVertical = coordinates[0] - coordinates[1] === 1 ? false: true;\n    setGame({\n      id: 'PLACE_SHIP',\n      player: 'computer',\n      name: ship.name,\n      coordinates,\n      isVertical,\n    });\n    setGame({ id: 'UPDATE_REMAINING_SHIPS', player: 'computer', value: 1 });\n  }, [inventory]);\n\n  useEffect(() => {\n    for (let shipKey in game.players.computer.ships) {\n      const ship = game.players.computer.ships[shipKey];\n      if (ship.isSunk && !ship.messageSent) {\n        shipSank('computer', shipKey);\n      }\n    }\n  }, [game.players.computer.ships]);\n\n  useEffect(() => {\n    for (let shipKey in game.players.human.ships) {\n      const ship = game.players.human.ships[shipKey];\n      if (ship.isSunk && !ship.messageSent) {\n        shipSank('human', shipKey);\n        setLastAttempt({\n          hit: false,\n          positions: [],\n          direction: -1,\n        });\n      }\n    }\n  }, [game.players.human.ships]);\n\n  useEffect(() => {\n    if (!game.started || game.winner) return;\n    const [direction, coordinate] = Gameboard.determineGuessDirection(game.players.human.board, lastAttempt.hit, lastAttempt.positions, lastAttempt.direction);\n    attackCoordinate('human', coordinate);\n    setLastAttempt((prevState) => ({ ...prevState, direction}));\n  }, [turn]);\n\n  useEffect(() => {\n    if (turn < 1 || game.winner) return;\n    const { remainingShips: remainingComputerShips } = game.players.computer;\n    const { remainingShips: remainingHumanShips } = game.players.human;\n    if (remainingComputerShips === 0 || remainingHumanShips === 0) {\n      const winner = remainingComputerShips ? 'computer' : 'human';\n      setGame({ id: 'UPDATE_WINNER', winner });\n      setGame({ id: 'SEND_MESSAGE', message: `${winner} wins!` });\n    }\n  }, [game.players.computer.remainingShips, game.players.human.remainingShips]);\n\n  let button = '';\n  if (game.winner) {\n    button = <button onClick={resetGame}>Replay?</button>;\n  } else if (!game.started) {\n    const message = isVertical ? 'Horizontal': 'Vertical';\n    button = <button onClick={() => setIsVertical(!isVertical)}>\n      {message}\n    </button>;\n  }\n\n  return (\n    <div className=\"game\">\n      <MessageBoard message={game.message} />\n      <div className=\"gameboard\">\n        <Board\n          gameboard={game.players.human.board}\n          ships={game.players.human.ships}\n          clickable={!game.started}\n          onClick={placeShips}\n          onHover={handleHoverEffects}\n          isHovering={isHovering}\n        />\n        {game.started && (\n          <Board\n            gameboard={game.players.computer.board}\n            ships={game.players.computer.ships}\n            clickable={game.started && canClick}\n            onClick={handleBoardClick}\n            hideShips={false}\n          />\n        )}\n      </div>\n      {button}\n    </div>\n  );\n};\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Header header={'Battleship!'} />\n      <Game />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}