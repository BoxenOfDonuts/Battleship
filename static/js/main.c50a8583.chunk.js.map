{"version":3,"sources":["factories/Ship/ShipTypes.js","components/Square/Square.js","components/Board/Board.js","factories/Player/Player.js","factories/Gameboard/Gameboard.js","components/Header/Header.js","components/Messageboard/MessageBoard.js","factories/Ship/Ship.js","utils/Playerstate/PlayerState.js","App.js","reportWebVitals.js","index.js"],"names":["ShipTypes","name","length","Square","handleClick","coordinate","position","ships","hideShips","shot","ship","window","classname","innerWidth","innerHeight","marker","hitShot","height","width","cx","cy","r","stroke","stroke-width","fill","missedShot","isSunk","leftEdge","rightEdge","className","onClick","Board","props","clickable","Array","map","value","index","start","rows","columnIndex","boardIndex","gameboard","renderRow","memo","Player","data","attack","opponentsGameboard","board","recieveAttack","computerAttack","openSpots","push","Number","randomAttack","Math","floor","random","attackOpponent","randomOpenSpot","Gameboard","validPlacement","coordinates","end","badPositions","forEach","includes","placeShip","newBoard","positions","randomCoordinates","shipType","loopCatch","randomSpots","i","console","log","isValid","direction","Header","header","headerArray","from","letter","MessageBoard","message","shipInfo","every","hits","getLength","isVertical","Ship","hit","shipAttacks","updatePlayerStates","state","action","id","shipPlacement","players","player","health","opponent","shipKey","newShips","messageSent","remainingShips","winner","started","init","error","computer","human","Game","useState","turn","setTurn","canClick","setCanClick","inventory","setInventory","lastAttempt","setLastAttempt","useReducer","game","setGame","shipSank","attackCoordinate","unshift","useEffect","sunk","prevState","remainingComputerShips","remainingHumanShips","newInventory","slice","setTimeout","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c50a8583.chunk.js","sourcesContent":["const ShipTypes = [\r\n  {\r\n    name: 'Carrier',\r\n    length: 5,\r\n  },\r\n  {\r\n    name: 'Battleship',\r\n    length: 4,\r\n  },\r\n  {\r\n    name: 'Destroyer',\r\n    length: 3,\r\n  },\r\n  {\r\n    name: 'Submarine',\r\n    length: 3,\r\n  },\r\n  {\r\n    name: 'Patrol Boat',\r\n    length: 2,\r\n  },\r\n]\r\n\r\nexport default ShipTypes","import React from 'react';\r\nimport './Square.css';\r\n\r\nconst Square = ({ handleClick, coordinate, position, ships, hideShips }) => {\r\n  const {shot, ship} = position;\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n  let classname = 'square';\r\n  let marker = '';\r\n\r\n  const hitShot = <svg height=\"40\" width=\"40\">\r\n    <circle cx=\"20\" cy=\"20\" r=\"12\" stroke=\"black\" stroke-width=\"1\" fill=\"red\" />\r\n    </svg>\r\n  \r\n  const missedShot = <svg height=\"40\" width=\"40\">\r\n    <circle cx=\"20\" cy=\"20\" r=\"12\" stroke=\"black\" stroke-width=\"1\" fill=\"white\" />\r\n    </svg>\r\n\r\n  classname += shot\r\n  ? ' no-click'\r\n  : '';\r\n\r\n  if (ship) {\r\n    classname += hideShips && !ships[ship].isSunk\r\n      ? ' hidden'\r\n      : ' ship';\r\n    \r\n    classname += ships[ship].isSunk\r\n      ? ' sunk'\r\n      : '';\r\n    \r\n      marker = shot\r\n     ? hitShot\r\n     : '';\r\n    \r\n     if (coordinate === ships[ship].leftEdge) {\r\n       classname += ' left-edge'\r\n     } else if (coordinate === ships[ship].rightEdge) {\r\n       classname += ' right-edge';\r\n     }\r\n  } else {\r\n    marker = shot\r\n    ? missedShot\r\n    : '';\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={classname}\r\n      onClick={() => handleClick(coordinate)}\r\n    >{marker}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Square;","import { memo } from 'react';\r\nimport Square from '../Square/Square';\r\n\r\nconst Board = (props) => {\r\n  let classname = 'board';\r\n\r\n  classname += props.clickable\r\n    ? ''\r\n    : ' no-click';\r\n\r\n  const renderRow = (index) => {\r\n    const start = index * 10;\r\n    const rows = Array(10)\r\n    .fill(null)\r\n    .map((value, columnIndex) => {\r\n      const boardIndex = start+columnIndex;\r\n      return <Square\r\n        key={boardIndex}\r\n        coordinate={boardIndex}\r\n        handleClick={props.onClick}\r\n        clickable={props.clickable}\r\n        ships={props.ships}\r\n        position={props.gameboard[boardIndex]}\r\n        hideShips={props.hideShips}\r\n      />\r\n    })\r\n\r\n    return (\r\n      <div\r\n        key={index}\r\n        className=\"board-row\"\r\n      >\r\n        {rows}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className={classname}>\r\n      {Array(10).fill(null).map((value, index) => renderRow(index))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default memo(Board);","const attackOpponent = () => ({\r\n  attack: (opponentsGameboard, coordinate) => {\r\n    if (opponentsGameboard.board[coordinate].shot === true) return;\r\n    return opponentsGameboard.recieveAttack(coordinate);\r\n  }\r\n})\r\n\r\nconst computerAttackOpponent = () => ({\r\n  computerAttack: (opponentsGameboard) => {\r\n    // let openSpots = opponentsGameboard.board.map((value, index) => {\r\n    //   if (value.shot || value.ship) {\r\n    //     return value;\r\n    //   }\r\n    //   return index;\r\n    // })\r\n    let openSpots = [];\r\n    for (let index in opponentsGameboard.board) {\r\n      if(!opponentsGameboard.board[index].shot) {\r\n        openSpots.push(Number(index))\r\n      }\r\n    }\r\n    const randomIndex = Math.floor(Math.random() * openSpots.length);\r\n    const randomAttack = openSpots[randomIndex]\r\n    return [attackOpponent().attack(opponentsGameboard, randomAttack), randomAttack]\r\n  },\r\n  randomOpenSpot: (opponentsGameboard) => {\r\n    let openSpots = [];\r\n    for (let index in opponentsGameboard) {\r\n      if(!opponentsGameboard[index].shot) {\r\n        openSpots.push(Number(index))\r\n      }\r\n    }\r\n    const randomIndex = Math.floor(Math.random() * openSpots.length);\r\n    const randomAttack = openSpots[randomIndex];\r\n    return randomAttack;\r\n  }\r\n\r\n})\r\n\r\n\r\nconst Player = (name) => {\r\n  const data = {\r\n    name,\r\n  }\r\n  return {\r\n    data,\r\n    ...attackOpponent(),\r\n    ...computerAttackOpponent(),\r\n  }\r\n}\r\n\r\nexport default Player;","const Gameboard = (() => {\r\n  const placeShip = (ship, board) => {\r\n    \r\n    // Does not mutate the board, not sure which I want at this point\r\n    const newBoard = [...board]\r\n    for (let position of ship.data.positions) {\r\n      newBoard[position] = {...board[position], ship: ship.data.name}\r\n    }\r\n    return newBoard;\r\n\r\n  }\r\n\r\n  const validPlacement = (coordinates, board) => {\r\n    // const { positions } = ship.data;\r\n    const start = coordinates[0];\r\n    const end = coordinates[coordinates.length-1];\r\n    if (start % 10 === 9 || end % 10 < start % 10 ) {\r\n      return false;\r\n    }\r\n    // for too close to another ship \r\n    const badPositions = [];\r\n    board.forEach((value, index) => {\r\n      if (value.ship) {\r\n        badPositions.push(index, index-10, index+10);\r\n        if (!(index % 10 === 9)) {\r\n          badPositions.push(index+1, index+11, index-9)\r\n        }\r\n        if (!(index % 10 === 0)) {\r\n          badPositions.push(index-1, index-11, index+9)\r\n        }\r\n      }\r\n    })\r\n\r\n    for (const value of coordinates) {\r\n      if (badPositions.includes(value)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  const randomCoordinates = (shipType, board) => {\r\n    let loopCatch = 0;\r\n    const randomSpots = (shipType) => {\r\n      const coordinate = Math.floor(Math.random() * 98)\r\n      const coordinates = [coordinate];\r\n      for (let i = 1; i < shipType.length; i++) {\r\n        coordinates.push(coordinate + i);\r\n      }\r\n      return coordinates;\r\n    }\r\n    let coordinates = randomSpots(shipType);\r\n    while(!validPlacement(coordinates, board) && loopCatch < 11) {\r\n        coordinates = randomSpots(shipType);\r\n        loopCatch++;\r\n        console.log('this shouldnt go a lot')\r\n    }\r\n\r\n    return coordinates;\r\n  }\r\n\r\n  const isValid = (board, position, direction) => {\r\n    console.log(board[position + direction])\r\n    if (board[position + direction].shot) {\r\n      return false\r\n    }\r\n    return true;\r\n  }\r\n\r\n  return { placeShip, validPlacement, randomCoordinates, isValid }\r\n})();\r\n\r\nexport default Gameboard;","import './Header.css';\r\n\r\nconst Header = ({ header }) => {\r\n  const headerArray = Array.from(header).map((letter,index) => {\r\n  return <span key={letter+index}>{letter}</span>\r\n  });\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <h1>\r\n        {headerArray}\r\n      </h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;","import './MessageBoard.css';\r\n\r\nconst MessageBoard = ({ message }) => {\r\n  return (\r\n    <div className=\"messages\">\r\n      <p>{message}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MessageBoard","// const shipInfo = (data) => ({\r\n//   isSunk: () => data.positions.every(position => data.hits.includes(position)),\r\n//   getLength: () => data.positions.length,\r\n//   isVertical: () => data.isVertical,\r\n// })\r\n\r\n// const shipAttacks = (data) => ({\r\n//   // hit isn't validating, expecting gameboard to manage that\r\n//   hit: (position) => {\r\n//     data.hits.push(position);\r\n//     data.isSunk = shipInfo(data).isSunk()\r\n//     // return data.name;\r\n//   },\r\n// })\r\n\r\n\r\n// const Ship = (name, positions) => {\r\n//   const data = {\r\n//     name,\r\n//     positions,\r\n//     hits: [],\r\n//     isSunk: false\r\n//   }\r\n\r\n//   return {\r\n//     data,\r\n//     ...shipAttacks(data),\r\n//     ...shipInfo(data),\r\n//   }\r\n// }\r\n\r\nconst shipInfo = (data) => ({\r\n  isSunk: () => data.positions.every(position => data.hits.includes(position)),\r\n  getLength: () => data.positions.length,\r\n  isVertical: () => data.isVertical,\r\n})\r\n\r\nconst shipAttacks = (data) => ({\r\n  // hit isn't validating, expecting gameboard to manage that\r\n  hit: (position) => {\r\n    data.hits.push(position);\r\n    data.isSunk = shipInfo(data).isSunk()\r\n    // return data.name;\r\n  },\r\n})\r\n\r\n\r\nconst Ship = (name, positions) => {\r\n  const data = {\r\n    name,\r\n    positions,\r\n  }\r\n\r\n  return {\r\n    data,\r\n    ...shipAttacks(data),\r\n    ...shipInfo(data),\r\n  }\r\n}\r\n\r\nexport default Ship;","import Gameboard from '../../factories/Gameboard/Gameboard';\r\nimport Ship from '../../factories/Ship/Ship';\r\n\r\nconst updatePlayerStates = (state, action) => {\r\n  switch (action.id) {\r\n    case \"PLACE_SHIP\": {\r\n               \r\n      const { name, coordinates } = action;\r\n      const ship = Ship(name, coordinates)\r\n      const shipPlacement = {\r\n        ...state.players[action.player].ships,\r\n        [ship.data.name]: {\r\n          name: name,\r\n          health: coordinates.length,\r\n          leftEdge: coordinates[0],\r\n          rightEdge: coordinates[coordinates.length -1],\r\n        }\r\n      }\r\n      const newBoard = Gameboard.placeShip(ship, state.players[action.player].board)\r\n      return {\r\n        ...state,\r\n        players: {\r\n          ...state.players,\r\n          [action.player]: {\r\n            ...state.players[action.player],\r\n            board: newBoard,\r\n            ships: shipPlacement\r\n          }\r\n        },\r\n      };\r\n    }\r\n    case \"ATTACK_SQUARE\": {\r\n      const {opponent, coordinate} = action;\r\n      const newBoard = [...state.players[opponent].board]\r\n      newBoard[coordinate].shot = true;\r\n      return {\r\n        ...state,\r\n        players: {\r\n          ...state.players,\r\n          [opponent]: {\r\n            ...state.players[opponent],\r\n            board: newBoard\r\n          }\r\n        }\r\n      }\r\n    }\r\n    case \"ATTACK_SHIP\": {\r\n      const {opponent, coordinate} = action;\r\n      const shipKey = state.players[opponent].board[coordinate].ship;\r\n      const ship = state.players[opponent].ships[shipKey];\r\n      const newShips = {\r\n        ...state.players[opponent].ships,\r\n        [shipKey]: {\r\n          ...ship,\r\n          health: ship.health -1\r\n        }\r\n      }\r\n      if (newShips[shipKey].health === 0) {\r\n        newShips[shipKey].isSunk = true;\r\n      }\r\n      return {\r\n        ...state,\r\n        players: {\r\n          ...state.players,\r\n          [opponent]: {\r\n            ...state.players[opponent],\r\n            ships: newShips,\r\n          }\r\n        }\r\n      }\r\n    }\r\n    case \"SEND_MESSAGE\": {\r\n      return {\r\n        ...state,\r\n        message: action.message\r\n      }\r\n    }\r\n    case \"SUNK_MESSAGE_SENT\": {\r\n      const { player: opponent, shipKey } = action;\r\n      const ship = state.players[opponent].ships[shipKey];\r\n      const newShips = {\r\n        ...state.players[opponent].ships,\r\n        [shipKey]: {\r\n          ...ship,\r\n          messageSent: true\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        players: {\r\n          ...state.players,\r\n          [opponent]: {\r\n            ...state.players[opponent],\r\n            ships: newShips,\r\n          }\r\n        }\r\n      }\r\n    }\r\n    case \"UPDATE_REMAINING_SHIPS\": {\r\n      const { player: opponent, value } = action;\r\n      return {\r\n        ...state,\r\n        players: {\r\n          ...state.players,\r\n          [opponent]:{\r\n            ...state.players[opponent],\r\n            remainingShips: state.players[opponent].remainingShips + value\r\n          }\r\n        }\r\n      };\r\n    }\r\n    case \"UPDATE_WINNER\": {\r\n      return {\r\n        ...state,\r\n        winner: action.winner\r\n      };\r\n    }\r\n    case \"GAME_START\": {\r\n      return {\r\n        ...state,\r\n        started: action.started\r\n      } \r\n    }\r\n    case \"RESET\": {\r\n      return init()\r\n    }\r\n    default:\r\n      console.log(\"BAD ACTION ID\")\r\n      console.error(\"BAD ACTION ID\")\r\n  }\r\n\r\n}\r\n\r\nconst init = () => {\r\n  const initialState = {\r\n    players: {\r\n      computer: {\r\n        name: \"HAL900\",\r\n        board: Array(100).fill(null).map((value, index) =>({shot: false, ship: false})),\r\n        ships: {},\r\n        remainingShips: 0,\r\n      },\r\n      human: {\r\n        name: \"Player\",\r\n        board: Array(100).fill(null).map((value, index) =>({shot: false, ship: false})),\r\n        ships: {},\r\n        remainingShips: 0,\r\n      },\r\n    },\r\n    message: 'Click on the board to place your ship',\r\n    winner: '',\r\n    started: false,\r\n  }\r\n  return initialState\r\n}\r\n\r\n\r\nexport { updatePlayerStates, init };","import './App.css';\r\nimport ShipTypes from './factories/Ship/ShipTypes';\r\nimport Board from './components/Board/Board';\r\nimport Player from './factories/Player/Player'\r\nimport Gameboard from './factories/Gameboard/Gameboard';\r\nimport Header from './components/Header/Header';\r\nimport MessageBoard from './components/Messageboard/MessageBoard';\r\nimport { updatePlayerStates, init } from './utils/Playerstate/PlayerState';\r\nimport { useState, useEffect, useReducer} from 'react';\r\n\r\n\r\n\r\nconst Game = () => {\r\n  const [ turn, setTurn ] = useState(0);\r\n  const [ canClick, setCanClick ] = useState(true);\r\n  const [ inventory, setInventory ] = useState(ShipTypes);\r\n  const [ lastAttempt, setLastAttempt ] = useState(\r\n    {\r\n      hit: false,\r\n      positions: [],\r\n      direction: -1\r\n    }\r\n  );\r\n  const [ game, setGame ] = useReducer(\r\n    updatePlayerStates,\r\n    init(),\r\n    init\r\n  );\r\n  \r\n  const shipSank = (player, ship) => {\r\n    const message = player === 'computer'\r\n      ? `Sank enemy ${ship}`\r\n      : `They sank my ${ship}`;\r\n    setGame({id: \"UPDATE_REMAINING_SHIPS\", player, value: -1})\r\n    setGame({id: \"SEND_MESSAGE\", message})\r\n    setGame({id: \"SUNK_MESSAGE_SENT\", player, shipKey: ship})\r\n  }\r\n\r\n  const attackCoordinate = (opponent, coordinate)=> {\r\n    const message = opponent === 'computer'\r\n      ? \"Hit Enemy Ship!\"\r\n      : \"Enemy hit my Ship!\";\r\n\r\n    setGame({id: \"ATTACK_SQUARE\", coordinate, opponent})\r\n    if (game.players[opponent].board[coordinate].ship) {\r\n      if (opponent === 'human') {\r\n        const positions = lastAttempt.positions;\r\n        if (lastAttempt.direction === -1) {\r\n          positions.unshift(coordinate)\r\n        } else {\r\n          positions.unshift(coordinate)\r\n        }\r\n        setLastAttempt({...lastAttempt, hit: true, positions,})\r\n      }\r\n      setGame({id: \"SEND_MESSAGE\", message})\r\n      setGame({id: \"ATTACK_SHIP\", coordinate, opponent})\r\n    } else {\r\n      setGame({id: \"SEND_MESSAGE\", message: \"Miss!\"})\r\n      if (opponent === 'human') {\r\n        setLastAttempt({...lastAttempt, hit: false})\r\n      }\r\n    }\r\n  }\r\n\r\n  const resetGame = () => {\r\n    setTurn(0);\r\n    setCanClick(true);\r\n    setInventory(ShipTypes);\r\n    setLastAttempt(\r\n      {\r\n        hit: false,\r\n        positions: [],\r\n        direction: -1\r\n      }\r\n    );\r\n    setGame({id: 'RESET'});\r\n  }\r\n\r\n  const handleBoardClick = (coordinate) => {\r\n    if (game.winner || game.players.computer.board[coordinate].shot) return;\r\n    attackCoordinate('computer', coordinate);\r\n    setCanClick(false);\r\n    setTimeout(() => {\r\n      setCanClick(true);\r\n      setTurn((turn) =>turn+1);\r\n    }, 1000)\r\n  }\r\n\r\n  const placeShips = (coordinate) => {\r\n    if (game.started) return;\r\n    const newInventory = inventory.slice(1, inventory.length);\r\n    const ship = inventory[0];\r\n    const coordinates = [coordinate];\r\n    for (let i = 1; i < ship.length; i++) {\r\n      coordinates.push(coordinate + i)\r\n    }\r\n    if (!Gameboard.validPlacement(coordinates, game.players.human.board)) return;\r\n    setInventory(newInventory)\r\n    setGame({id: \"PLACE_SHIP\", player: 'human', name: ship.name, coordinates})\r\n    setGame({id: 'UPDATE_REMAINING_SHIPS', player: 'human', value: 1})\r\n    if (newInventory.length === 0) {\r\n      setGame({id: 'GAME_START', started: true})\r\n      setGame({id: \"SEND_MESSAGE\", message: 'Game Start!'})\r\n    }\r\n  }\r\n  \r\n  useEffect(() => {\r\n    if (game.started || inventory.length === 0) return;\r\n    const ship = inventory[0];\r\n    const coordinates = Gameboard.randomCoordinates(ship, game.players.computer.board);\r\n    setGame({id: \"PLACE_SHIP\", player: 'computer', name: ship.name, coordinates})\r\n    setGame({id: 'UPDATE_REMAINING_SHIPS', player: 'computer', value: 1})\r\n  },[inventory])\r\n  \r\n  useEffect(() => {\r\n    for (let shipKey in game.players.computer.ships) {\r\n      const ship = game.players.computer.ships[shipKey]\r\n      if (ship.isSunk && !ship.messageSent) {\r\n        shipSank('computer', shipKey);\r\n      }\r\n    }\r\n  },[game.players.computer.ships])\r\n  \r\n  useEffect(() => {\r\n    for (let shipKey in game.players.human.ships) {\r\n      const ship = game.players.human.ships[shipKey]\r\n      if (ship.isSunk && !ship.messageSent) {\r\n        shipSank('human', shipKey);\r\n        setLastAttempt({hit: false, positions: [], direction: -1, sunk:null})\r\n      }\r\n    }\r\n  },[game.players.human.ships])\r\n\r\n  useEffect(() => {\r\n    if (!game.started|| game.winner) return;\r\n    if (lastAttempt.hit && lastAttempt.positions[0] % 10 !== 0 && Gameboard.isValid(game.players.human.board, lastAttempt.positions[0], lastAttempt.direction)) {\r\n      let coordinate = lastAttempt.positions[0];\r\n      coordinate = coordinate + lastAttempt.direction;\r\n      console.log(`last attempt hit, trying ${coordinate}`)\r\n      attackCoordinate('human', coordinate)\r\n    } else if (lastAttempt.positions.length > 0) {\r\n      let coordinate = lastAttempt.positions[lastAttempt.positions.length -1];\r\n      coordinate = coordinate + 1;\r\n      console.log(`last attemp missed, trying the other way... ${coordinate}`);\r\n      attackCoordinate('human', coordinate)\r\n      setLastAttempt((prevState) => ({...prevState, direction: 1}))\r\n    } else {\r\n      const p = Player()\r\n      const coordinate = p.randomOpenSpot(game.players.human.board)\r\n      attackCoordinate('human', coordinate)\r\n    }\r\n  },[turn])\r\n\r\n  useEffect(() => {\r\n    if (turn < 1 || game.winner) return;\r\n    const { remainingShips:remainingComputerShips } = game.players.computer;\r\n    const { remainingShips:remainingHumanShips } = game.players.human;\r\n    if (remainingComputerShips === 0 || remainingHumanShips === 0) {\r\n      const winner = remainingComputerShips ? 'computer': 'human';\r\n      setGame({id: 'UPDATE_WINNER', winner})\r\n      setGame({id: 'SEND_MESSAGE', message: `${winner} wins!`})\r\n\r\n    }\r\n  },[game.players.computer.remainingShips, game.players.human.remainingShips])\r\n\r\n  \r\n  return (\r\n    <div className=\"game\">\r\n      <MessageBoard\r\n        message={game.message}\r\n      />\r\n      <div className=\"gameboard\">\r\n        <Board\r\n            gameboard={game.players.human.board}\r\n            ships={game.players.human.ships}\r\n            clickable={!game.started}\r\n            onClick={placeShips}\r\n        />\r\n        {game.started && <Board\r\n            gameboard={game.players.computer.board}\r\n            onClick={handleBoardClick}\r\n            ships={game.players.computer.ships}\r\n            clickable={game.started && canClick}\r\n            hideShips={false}\r\n        />}\r\n      </div>\r\n      {game.winner && <button onClick={resetGame}>\r\n          Replay?\r\n        </button>}\r\n    </div>\r\n    );\r\n}\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header header={'Battleship!'}/>\r\n      <Game />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}