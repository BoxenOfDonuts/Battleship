{"version":3,"sources":["factories/Ship/ShipTypes.js","components/Square/Square.js","components/Board/Board.js","factories/Player/Player.js","factories/Gameboard/Gameboard.js","components/Header/Header.js","components/Messageboard/MessageBoard.js","factories/Ship/Ship.js","utils/Playerstate/PlayerState.js","App.js","reportWebVitals.js","index.js"],"names":["ShipTypes","name","length","Square","handleClick","handleHover","isHovering","coordinate","position","ships","hideShips","shot","ship","classname","marker","hitShot","height","width","cx","cy","r","stroke","strokeWidth","fill","missedShot","includes","isSunk","leftEdge","rightEdge","className","onMouseEnter","onClick","Board","props","clickable","Array","map","value","index","start","rows","columnIndex","boardIndex","gameboard","onHover","renderRow","memo","Player","data","attack","opponentsGameboard","board","recieveAttack","computerAttack","openSpots","push","Number","randomAttack","Math","floor","random","attackOpponent","randomOpenSpot","Gameboard","validPlacement","coordinates","end","badPositions","forEach","placeShip","newBoard","positions","randomCoordinates","shipType","loopCatch","randomSpots","i","console","log","isValid","direction","Header","header","headerArray","from","letter","MessageBoard","message","shipInfo","every","hits","getLength","isVertical","Ship","hit","shipAttacks","updatePlayerStates","state","action","id","shipPlacement","players","player","health","opponent","shipKey","newShips","messageSent","remainingShips","winner","started","init","error","computer","human","Game","useState","turn","setTurn","canClick","setCanClick","inventory","setInventory","setIsHovering","lastAttempt","setLastAttempt","useReducer","game","setGame","shipSank","attackCoordinate","unshift","useEffect","sunk","prevState","remainingComputerShips","remainingHumanShips","newInventory","slice","setTimeout","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.738f625d.chunk.js","sourcesContent":["const ShipTypes = [\n  {\n    name: 'Carrier',\n    length: 5,\n  },\n  {\n    name: 'Battleship',\n    length: 4,\n  },\n  {\n    name: 'Destroyer',\n    length: 3,\n  },\n  {\n    name: 'Submarine',\n    length: 3,\n  },\n  {\n    name: 'Patrol Boat',\n    length: 2,\n  },\n];\n\nexport default ShipTypes;\n","import React from 'react';\nimport './Square.css';\n\nconst Square = ({\n  handleClick,\n  handleHover,\n  isHovering = [],\n  coordinate,\n  position,\n  ships,\n  hideShips,\n}) => {\n  const { shot, ship } = position;\n  let classname = 'square';\n  let marker = '';\n\n  const hitShot = (\n    <svg height=\"40\" width=\"40\">\n      <circle\n        cx=\"20\"\n        cy=\"20\"\n        r=\"12\"\n        stroke=\"black\"\n        strokeWidth=\"1\"\n        fill=\"red\"\n      />\n    </svg>\n  );\n\n  const missedShot = (\n    <svg height=\"40\" width=\"40\">\n      <circle\n        cx=\"20\"\n        cy=\"20\"\n        r=\"12\"\n        stroke=\"black\"\n        strokeWidth=\"1\"\n        fill=\"white\"\n      />\n    </svg>\n  );\n\n  if (isHovering) {\n    classname += isHovering.includes(coordinate) ? ' hover-ship' : '';\n  }\n\n  classname += shot ? ' no-click' : '';\n\n  if (ship) {\n    classname += hideShips && !ships[ship].isSunk ? ' hidden' : ' ship';\n\n    classname += ships[ship].isSunk ? ' sunk' : '';\n\n    marker = shot ? hitShot : '';\n\n    if (coordinate === ships[ship].leftEdge) {\n      classname += ' left-edge';\n    } else if (coordinate === ships[ship].rightEdge) {\n      classname += ' right-edge';\n    }\n  } else {\n    marker = shot ? missedShot : '';\n  }\n\n  const hoverPositions = () => {\n    if (!handleHover) return;\n\n    handleHover(coordinate);\n  };\n\n  return (\n    <div\n      className={classname}\n      onMouseEnter={hoverPositions}\n      onClick={() => handleClick(coordinate)}\n    >\n      {marker}\n    </div>\n  );\n};\n\nexport default Square;\n","import { memo } from 'react';\nimport Square from '../Square/Square';\n\nconst Board = (props) => {\n  let classname = 'board';\n\n  classname += props.clickable ? '' : ' no-click';\n\n  const renderRow = (index) => {\n    const start = index * 10;\n    const rows = Array(10)\n      .fill(null)\n      .map((value, columnIndex) => {\n        const boardIndex = start + columnIndex;\n        return (\n          <Square\n            key={boardIndex}\n            coordinate={boardIndex}\n            handleClick={props.onClick}\n            clickable={props.clickable}\n            ships={props.ships}\n            position={props.gameboard[boardIndex]}\n            hideShips={props.hideShips}\n            handleHover={props.onHover}\n            isHovering={props.isHovering}\n          />\n        );\n      });\n\n    return (\n      <div key={index} className=\"board-row\">\n        {rows}\n      </div>\n    );\n  };\n\n  return (\n    <div className={classname}>\n      {Array(10)\n        .fill(null)\n        .map((value, index) => renderRow(index))}\n    </div>\n  );\n};\n\nexport default memo(Board);\n","const attackOpponent = () => ({\n  attack: (opponentsGameboard, coordinate) => {\n    if (opponentsGameboard.board[coordinate].shot === true) return;\n    return opponentsGameboard.recieveAttack(coordinate);\n  },\n});\n\nconst computerAttackOpponent = () => ({\n  computerAttack: (opponentsGameboard) => {\n    // let openSpots = opponentsGameboard.board.map((value, index) => {\n    //   if (value.shot || value.ship) {\n    //     return value;\n    //   }\n    //   return index;\n    // })\n    let openSpots = [];\n    for (let index in opponentsGameboard.board) {\n      if (!opponentsGameboard.board[index].shot) {\n        openSpots.push(Number(index));\n      }\n    }\n    const randomIndex = Math.floor(Math.random() * openSpots.length);\n    const randomAttack = openSpots[randomIndex];\n    return [\n      attackOpponent().attack(opponentsGameboard, randomAttack),\n      randomAttack,\n    ];\n  },\n  randomOpenSpot: (opponentsGameboard) => {\n    let openSpots = [];\n    for (let index in opponentsGameboard) {\n      if (!opponentsGameboard[index].shot) {\n        openSpots.push(Number(index));\n      }\n    }\n    const randomIndex = Math.floor(Math.random() * openSpots.length);\n    const randomAttack = openSpots[randomIndex];\n    return randomAttack;\n  },\n});\n\nconst Player = (name) => {\n  const data = {\n    name,\n  };\n  return {\n    data,\n    ...attackOpponent(),\n    ...computerAttackOpponent(),\n  };\n};\n\nexport default Player;\n","const Gameboard = (() => {\n  const placeShip = (ship, board) => {\n    // Does not mutate the board, not sure which I want at this point\n    const newBoard = [...board];\n    for (let position of ship.data.positions) {\n      newBoard[position] = { ...board[position], ship: ship.data.name };\n    }\n    return newBoard;\n  };\n\n  const validPlacement = (coordinates, board) => {\n    // const { positions } = ship.data;\n    const start = coordinates[0];\n    const end = coordinates[coordinates.length - 1];\n    if (start % 10 === 9 || end % 10 < start % 10) {\n      return false;\n    }\n    // for too close to another ship\n    const badPositions = [];\n    board.forEach((value, index) => {\n      if (value.ship) {\n        badPositions.push(index, index - 10, index + 10);\n        if (!(index % 10 === 9)) {\n          badPositions.push(index + 1, index + 11, index - 9);\n        }\n        if (!(index % 10 === 0)) {\n          badPositions.push(index - 1, index - 11, index + 9);\n        }\n      }\n    });\n\n    for (const value of coordinates) {\n      if (badPositions.includes(value)) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  const randomCoordinates = (shipType, board) => {\n    let loopCatch = 0;\n    const randomSpots = (shipType) => {\n      const coordinate = Math.floor(Math.random() * 98);\n      const coordinates = [coordinate];\n      for (let i = 1; i < shipType.length; i++) {\n        coordinates.push(coordinate + i);\n      }\n      return coordinates;\n    };\n    let coordinates = randomSpots(shipType);\n    while (!validPlacement(coordinates, board) && loopCatch < 11) {\n      coordinates = randomSpots(shipType);\n      loopCatch++;\n      console.log('this shouldnt go a lot');\n    }\n\n    return coordinates;\n  };\n\n  const isValid = (board, position, direction) => {\n    console.log(board[position + direction]);\n    if (board[position + direction].shot) {\n      return false;\n    }\n    return true;\n  };\n\n  return { placeShip, validPlacement, randomCoordinates, isValid };\n})();\n\nexport default Gameboard;\n","import './Header.css';\n\nconst Header = ({ header }) => {\n  const headerArray = Array.from(header).map((letter, index) => {\n    return <span key={letter + index}>{letter}</span>;\n  });\n\n  return (\n    <div className=\"header\">\n      <h1>{headerArray}</h1>\n    </div>\n  );\n};\n\nexport default Header;\n","import './MessageBoard.css';\n\nconst MessageBoard = ({ message }) => {\n  return (\n    <div className=\"messages\">\n      <p>{message}</p>\n    </div>\n  );\n};\n\nexport default MessageBoard;\n","// const shipInfo = (data) => ({\n//   isSunk: () => data.positions.every(position => data.hits.includes(position)),\n//   getLength: () => data.positions.length,\n//   isVertical: () => data.isVertical,\n// })\n\n// const shipAttacks = (data) => ({\n//   // hit isn't validating, expecting gameboard to manage that\n//   hit: (position) => {\n//     data.hits.push(position);\n//     data.isSunk = shipInfo(data).isSunk()\n//     // return data.name;\n//   },\n// })\n\n// const Ship = (name, positions) => {\n//   const data = {\n//     name,\n//     positions,\n//     hits: [],\n//     isSunk: false\n//   }\n\n//   return {\n//     data,\n//     ...shipAttacks(data),\n//     ...shipInfo(data),\n//   }\n// }\n\nconst shipInfo = (data) => ({\n  isSunk: () =>\n    data.positions.every((position) => data.hits.includes(position)),\n  getLength: () => data.positions.length,\n  isVertical: () => data.isVertical,\n});\n\nconst shipAttacks = (data) => ({\n  // hit isn't validating, expecting gameboard to manage that\n  hit: (position) => {\n    data.hits.push(position);\n    data.isSunk = shipInfo(data).isSunk();\n    // return data.name;\n  },\n});\n\nconst Ship = (name, positions) => {\n  const data = {\n    name,\n    positions,\n  };\n\n  return {\n    data,\n    ...shipAttacks(data),\n    ...shipInfo(data),\n  };\n};\n\nexport default Ship;\n","import Gameboard from '../../factories/Gameboard/Gameboard';\nimport Ship from '../../factories/Ship/Ship';\n\nconst updatePlayerStates = (state, action) => {\n  switch (action.id) {\n    case 'PLACE_SHIP': {\n      const { name, coordinates } = action;\n      const ship = Ship(name, coordinates);\n      const shipPlacement = {\n        ...state.players[action.player].ships,\n        [ship.data.name]: {\n          name: name,\n          health: coordinates.length,\n          leftEdge: coordinates[0],\n          rightEdge: coordinates[coordinates.length - 1],\n        },\n      };\n      const newBoard = Gameboard.placeShip(\n        ship,\n        state.players[action.player].board\n      );\n      return {\n        ...state,\n        players: {\n          ...state.players,\n          [action.player]: {\n            ...state.players[action.player],\n            board: newBoard,\n            ships: shipPlacement,\n          },\n        },\n      };\n    }\n    case 'ATTACK_SQUARE': {\n      const { opponent, coordinate } = action;\n      const newBoard = [...state.players[opponent].board];\n      newBoard[coordinate].shot = true;\n      return {\n        ...state,\n        players: {\n          ...state.players,\n          [opponent]: {\n            ...state.players[opponent],\n            board: newBoard,\n          },\n        },\n      };\n    }\n    case 'ATTACK_SHIP': {\n      const { opponent, coordinate } = action;\n      const shipKey = state.players[opponent].board[coordinate].ship;\n      const ship = state.players[opponent].ships[shipKey];\n      const newShips = {\n        ...state.players[opponent].ships,\n        [shipKey]: {\n          ...ship,\n          health: ship.health - 1,\n        },\n      };\n      if (newShips[shipKey].health === 0) {\n        newShips[shipKey].isSunk = true;\n      }\n      return {\n        ...state,\n        players: {\n          ...state.players,\n          [opponent]: {\n            ...state.players[opponent],\n            ships: newShips,\n          },\n        },\n      };\n    }\n    case 'SEND_MESSAGE': {\n      return {\n        ...state,\n        message: action.message,\n      };\n    }\n    case 'SUNK_MESSAGE_SENT': {\n      const { player: opponent, shipKey } = action;\n      const ship = state.players[opponent].ships[shipKey];\n      const newShips = {\n        ...state.players[opponent].ships,\n        [shipKey]: {\n          ...ship,\n          messageSent: true,\n        },\n      };\n      return {\n        ...state,\n        players: {\n          ...state.players,\n          [opponent]: {\n            ...state.players[opponent],\n            ships: newShips,\n          },\n        },\n      };\n    }\n    case 'UPDATE_REMAINING_SHIPS': {\n      const { player: opponent, value } = action;\n      return {\n        ...state,\n        players: {\n          ...state.players,\n          [opponent]: {\n            ...state.players[opponent],\n            remainingShips: state.players[opponent].remainingShips + value,\n          },\n        },\n      };\n    }\n    case 'UPDATE_WINNER': {\n      return {\n        ...state,\n        winner: action.winner,\n      };\n    }\n    case 'GAME_START': {\n      return {\n        ...state,\n        started: action.started,\n      };\n    }\n    case 'RESET': {\n      return init();\n    }\n    default:\n      console.log('BAD ACTION ID');\n      console.error('BAD ACTION ID');\n  }\n};\n\nconst init = () => {\n  const initialState = {\n    players: {\n      computer: {\n        name: 'HAL900',\n        board: Array(100)\n          .fill(null)\n          .map((value, index) => ({ shot: false, ship: false })),\n        ships: {},\n        remainingShips: 0,\n      },\n      human: {\n        name: 'Player',\n        board: Array(100)\n          .fill(null)\n          .map((value, index) => ({ shot: false, ship: false })),\n        ships: {},\n        remainingShips: 0,\n      },\n    },\n    message: 'Click on the board to place your ships',\n    winner: '',\n    started: false,\n  };\n  return initialState;\n};\n\nexport { updatePlayerStates, init };\n","import './App.css';\nimport ShipTypes from './factories/Ship/ShipTypes';\nimport Board from './components/Board/Board';\nimport Player from './factories/Player/Player';\nimport Gameboard from './factories/Gameboard/Gameboard';\nimport Header from './components/Header/Header';\nimport MessageBoard from './components/Messageboard/MessageBoard';\nimport { updatePlayerStates, init } from './utils/Playerstate/PlayerState';\nimport { useState, useEffect, useReducer } from 'react';\n\nconst Game = () => {\n  const [turn, setTurn] = useState(0);\n  const [canClick, setCanClick] = useState(true);\n  const [inventory, setInventory] = useState(ShipTypes);\n  const [isHovering, setIsHovering] = useState([]);\n  const [lastAttempt, setLastAttempt] = useState({\n    hit: false,\n    positions: [],\n    direction: -1,\n  });\n  const [game, setGame] = useReducer(updatePlayerStates, init(), init);\n\n  const shipSank = (player, ship) => {\n    const message =\n      player === 'computer' ? `Sank enemy ${ship}` : `They sank my ${ship}`;\n    setGame({ id: 'UPDATE_REMAINING_SHIPS', player, value: -1 });\n    setGame({ id: 'SEND_MESSAGE', message });\n    setGame({ id: 'SUNK_MESSAGE_SENT', player, shipKey: ship });\n  };\n\n  const attackCoordinate = (opponent, coordinate) => {\n    const message =\n      opponent === 'computer' ? 'Hit Enemy Ship!' : 'Enemy hit my Ship!';\n\n    setGame({ id: 'ATTACK_SQUARE', coordinate, opponent });\n    if (game.players[opponent].board[coordinate].ship) {\n      if (opponent === 'human') {\n        const positions = lastAttempt.positions;\n        if (lastAttempt.direction === -1) {\n          positions.unshift(coordinate);\n        } else {\n          positions.unshift(coordinate);\n        }\n        setLastAttempt({ ...lastAttempt, hit: true, positions });\n      }\n      setGame({ id: 'SEND_MESSAGE', message });\n      setGame({ id: 'ATTACK_SHIP', coordinate, opponent });\n    } else {\n      setGame({ id: 'SEND_MESSAGE', message: 'Miss!' });\n      if (opponent === 'human') {\n        setLastAttempt({ ...lastAttempt, hit: false });\n      }\n    }\n  };\n\n  const resetGame = () => {\n    setTurn(0);\n    setCanClick(true);\n    setInventory(ShipTypes);\n    setLastAttempt({\n      hit: false,\n      positions: [],\n      direction: -1,\n    });\n    setGame({ id: 'RESET' });\n  };\n\n  const handleBoardClick = (coordinate) => {\n    if (game.winner || game.players.computer.board[coordinate].shot) return;\n    attackCoordinate('computer', coordinate);\n    setCanClick(false);\n    setTimeout(() => {\n      setCanClick(true);\n      setTurn((turn) => turn + 1);\n    }, 1000);\n  };\n\n  const placeShips = (coordinate) => {\n    if (game.started) return;\n    const newInventory = inventory.slice(1, inventory.length);\n    const ship = inventory[0];\n    const coordinates = [coordinate];\n    for (let i = 1; i < ship.length; i++) {\n      coordinates.push(coordinate + i);\n    }\n    if (!Gameboard.validPlacement(coordinates, game.players.human.board))\n      return;\n    setInventory(newInventory);\n    setGame({\n      id: 'PLACE_SHIP',\n      player: 'human',\n      name: ship.name,\n      coordinates,\n    });\n    setGame({ id: 'UPDATE_REMAINING_SHIPS', player: 'human', value: 1 });\n    if (newInventory.length === 0) {\n      setGame({ id: 'GAME_START', started: true });\n      setGame({ id: 'SEND_MESSAGE', message: 'Game Start!' });\n      setIsHovering([]);\n    }\n  };\n\n  const handleHoverEffects = (coordinate) => {\n    if (game.started) return;\n    const ship = inventory[0];\n    const coordinates = [coordinate];\n    for (let i = 1; i < ship.length && (coordinate + i) % 10 !== 0; i++) {\n      coordinates.push(coordinate + i);\n    }\n    setIsHovering(coordinates);\n  };\n\n  useEffect(() => {\n    if (game.started || inventory.length === 0) return;\n    const ship = inventory[0];\n    const coordinates = Gameboard.randomCoordinates(\n      ship,\n      game.players.computer.board\n    );\n    setGame({\n      id: 'PLACE_SHIP',\n      player: 'computer',\n      name: ship.name,\n      coordinates,\n    });\n    setGame({ id: 'UPDATE_REMAINING_SHIPS', player: 'computer', value: 1 });\n  }, [inventory]);\n\n  useEffect(() => {\n    for (let shipKey in game.players.computer.ships) {\n      const ship = game.players.computer.ships[shipKey];\n      if (ship.isSunk && !ship.messageSent) {\n        shipSank('computer', shipKey);\n      }\n    }\n  }, [game.players.computer.ships]);\n\n  useEffect(() => {\n    for (let shipKey in game.players.human.ships) {\n      const ship = game.players.human.ships[shipKey];\n      if (ship.isSunk && !ship.messageSent) {\n        shipSank('human', shipKey);\n        setLastAttempt({\n          hit: false,\n          positions: [],\n          direction: -1,\n          sunk: null,\n        });\n      }\n    }\n  }, [game.players.human.ships]);\n\n  useEffect(() => {\n    if (!game.started || game.winner) return;\n    if (\n      lastAttempt.hit &&\n      lastAttempt.positions[0] % 10 !== 0 &&\n      Gameboard.isValid(\n        game.players.human.board,\n        lastAttempt.positions[0],\n        lastAttempt.direction\n      )\n    ) {\n      let coordinate = lastAttempt.positions[0];\n      coordinate = coordinate + lastAttempt.direction;\n      console.log(`last attempt hit, trying ${coordinate}`);\n      attackCoordinate('human', coordinate);\n    } else if (lastAttempt.positions.length > 0) {\n      let coordinate = lastAttempt.positions[lastAttempt.positions.length - 1];\n      coordinate = coordinate + 1;\n      console.log(`last attemp missed, trying the other way... ${coordinate}`);\n      attackCoordinate('human', coordinate);\n      setLastAttempt((prevState) => ({ ...prevState, direction: 1 }));\n    } else {\n      const p = Player();\n      const coordinate = p.randomOpenSpot(game.players.human.board);\n      attackCoordinate('human', coordinate);\n    }\n  }, [turn]);\n\n  useEffect(() => {\n    if (turn < 1 || game.winner) return;\n    const { remainingShips: remainingComputerShips } = game.players.computer;\n    const { remainingShips: remainingHumanShips } = game.players.human;\n    if (remainingComputerShips === 0 || remainingHumanShips === 0) {\n      const winner = remainingComputerShips ? 'computer' : 'human';\n      setGame({ id: 'UPDATE_WINNER', winner });\n      setGame({ id: 'SEND_MESSAGE', message: `${winner} wins!` });\n    }\n  }, [game.players.computer.remainingShips, game.players.human.remainingShips]);\n\n  return (\n    <div className=\"game\">\n      <MessageBoard message={game.message} />\n      <div className=\"gameboard\">\n        <Board\n          gameboard={game.players.human.board}\n          ships={game.players.human.ships}\n          clickable={!game.started}\n          onClick={placeShips}\n          onHover={handleHoverEffects}\n          isHovering={isHovering}\n        />\n        {game.started && (\n          <Board\n            gameboard={game.players.computer.board}\n            ships={game.players.computer.ships}\n            clickable={game.started && canClick}\n            onClick={handleBoardClick}\n            hideShips={true}\n          />\n        )}\n      </div>\n      {game.winner && <button onClick={resetGame}>Replay?</button>}\n    </div>\n  );\n};\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Header header={'Battleship!'} />\n      <Game />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}