{"version":3,"sources":["factories/Ship/ShipTypes.js","factories/Ship/Ship.js","factories/Gameboard/Gameboard.js","utils/Playerstate/PlayerState.js","components/Square/Square.js","components/Board/Board.js","factories/Player/Player.js","App.js","reportWebVitals.js","index.js"],"names":["ShipTypes","name","length","shipInfo","data","isSunk","positions","every","position","hits","includes","getLength","isVertical","Ship","hit","push","shipAttacks","Gameboard","validPlacement","coordinates","board","start","end","badPositions","forEach","value","index","ship","placeShip","newBoard","randomCoordinates","shipType","randomSpots","coordinate","Math","floor","random","i","updatePlayerStates","state","action","id","shipPlacement","players","player","ships","health","opponent","shot","shipKey","newShips","message","messageSent","remainingShips","winner","started","console","log","error","Square","clickable","handleClick","hideShips","style","className","onClick","Board","props","Array","fill","map","rows","columnIndex","boardIndex","gameboard","renderRow","memo","Player","attack","opponentsGameboard","recieveAttack","computerAttack","openSpots","Number","randomAttack","attackOpponent","randomOpenSpot","Game","useState","turn","setTurn","canClick","setCanClick","inventory","setInventory","useReducer","computer","human","game","setGame","shipSank","attackCoordinate","useEffect","remainingComputerShips","remainingHumanShips","newInventory","slice","setTimeout","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a17d6ea2.chunk.js","sourcesContent":["const ShipTypes = [\r\n  {\r\n    name: 'Carrier',\r\n    length: 5,\r\n  },\r\n  {\r\n    name: 'Battleship',\r\n    length: 4,\r\n  },\r\n  {\r\n    name: 'Destroyer',\r\n    length: 3,\r\n  },\r\n  {\r\n    name: 'Submarine',\r\n    length: 3,\r\n  },\r\n  {\r\n    name: 'Patrol Boat',\r\n    length: 2,\r\n  },\r\n]\r\n\r\nexport default ShipTypes","// const shipInfo = (data) => ({\r\n//   isSunk: () => data.positions.every(position => data.hits.includes(position)),\r\n//   getLength: () => data.positions.length,\r\n//   isVertical: () => data.isVertical,\r\n// })\r\n\r\n// const shipAttacks = (data) => ({\r\n//   // hit isn't validating, expecting gameboard to manage that\r\n//   hit: (position) => {\r\n//     data.hits.push(position);\r\n//     data.isSunk = shipInfo(data).isSunk()\r\n//     // return data.name;\r\n//   },\r\n// })\r\n\r\n\r\n// const Ship = (name, positions) => {\r\n//   const data = {\r\n//     name,\r\n//     positions,\r\n//     hits: [],\r\n//     isSunk: false\r\n//   }\r\n\r\n//   return {\r\n//     data,\r\n//     ...shipAttacks(data),\r\n//     ...shipInfo(data),\r\n//   }\r\n// }\r\n\r\nconst shipInfo = (data) => ({\r\n  isSunk: () => data.positions.every(position => data.hits.includes(position)),\r\n  getLength: () => data.positions.length,\r\n  isVertical: () => data.isVertical,\r\n})\r\n\r\nconst shipAttacks = (data) => ({\r\n  // hit isn't validating, expecting gameboard to manage that\r\n  hit: (position) => {\r\n    data.hits.push(position);\r\n    data.isSunk = shipInfo(data).isSunk()\r\n    // return data.name;\r\n  },\r\n})\r\n\r\n\r\nconst Ship = (name, positions) => {\r\n  const data = {\r\n    name,\r\n    positions,\r\n  }\r\n\r\n  return {\r\n    data,\r\n    ...shipAttacks(data),\r\n    ...shipInfo(data),\r\n  }\r\n}\r\n\r\nexport default Ship;","import ShipTypes from '../Ship/ShipTypes';\r\nimport Ship from '../Ship/Ship'\r\n\r\nconst Gameboard = (() => {\r\n  const placeShip = (ship, board) => {\r\n    \r\n    // Does not mutate the board, not sure which I want at this point\r\n    const newBoard = [...board]\r\n    for (let position of ship.data.positions) {\r\n      newBoard[position] = {...board[position], ship: ship.data.name}\r\n    }\r\n    return newBoard;\r\n\r\n  }\r\n\r\n  const validPlacement = (coordinates, board) => {\r\n    // const { positions } = ship.data;\r\n    const start = coordinates[0];\r\n    const end = coordinates[coordinates.length-1];\r\n    if (start % 10 === 9 || end % 10 < start % 10 ) {\r\n      return false;\r\n    }\r\n    // for too close to another ship \r\n    const badPositions = [];\r\n    board.forEach((value, index) => {\r\n      if (value.ship) {\r\n        badPositions.push(index, index-10, index+10);\r\n        if (!(index % 10 === 9)) {\r\n          badPositions.push(index+1, index+11, index-9)\r\n        }\r\n        if (!(index % 10 === 0)) {\r\n          badPositions.push(index-1, index-11, index+9)\r\n        }\r\n      }\r\n    })\r\n\r\n    for (const value of coordinates) {\r\n      if (badPositions.includes(value)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  const randomCoordinates = (shipType, board) => {\r\n    const randomSpots = (shipType) => {\r\n      const coordinate = Math.floor(Math.random() * 98)\r\n      const coordinates = [coordinate];\r\n      for (let i = 1; i < shipType.length; i++) {\r\n        coordinates.push(coordinate + i);\r\n      }\r\n      return coordinates;\r\n    }\r\n    let coordinates = randomSpots(shipType);\r\n    while(!validPlacement(coordinates, board)) {\r\n        coordinates = randomSpots(shipType);\r\n    }\r\n\r\n    return coordinates;\r\n  }\r\n\r\n  return { placeShip, validPlacement, randomCoordinates }\r\n})();\r\n\r\nexport default Gameboard;","import Gameboard from '../../factories/Gameboard/Gameboard';\r\nimport Ship from '../../factories/Ship/Ship';\r\n\r\nconst updatePlayerStates = (state, action) => {\r\n  switch (action.id) {\r\n    case \"PLACE_SHIP\": {\r\n               \r\n      const { name, coordinates } = action;\r\n      const ship = Ship(name, coordinates)\r\n      const shipPlacement = {\r\n        ...state.players[action.player].ships,\r\n        [ship.data.name]: {\r\n          name: name,\r\n          health: coordinates.length,\r\n        }\r\n      }\r\n      const newBoard = Gameboard.placeShip(ship, state.players[action.player].board)\r\n      return {\r\n        ...state,\r\n        players: {\r\n          ...state.players,\r\n          [action.player]: {\r\n            ...state.players[action.player],\r\n            board: newBoard,\r\n            ships: shipPlacement\r\n          }\r\n        },\r\n      };\r\n    }\r\n    case \"ATTACK_SQUARE\": {\r\n      const {opponent, coordinate} = action;\r\n      const newBoard = [...state.players[opponent].board]\r\n      newBoard[coordinate].shot = true;\r\n      return {\r\n        ...state,\r\n        players: {\r\n          ...state.players,\r\n          [opponent]: {\r\n            ...state.players[opponent],\r\n            board: newBoard\r\n          }\r\n        }\r\n      }\r\n    }\r\n    case \"ATTACK_SHIP\": {\r\n      const {opponent, coordinate} = action;\r\n      const shipKey = state.players[opponent].board[coordinate].ship;\r\n      const ship = state.players[opponent].ships[shipKey];\r\n      const newShips = {\r\n        ...state.players[opponent].ships,\r\n        [shipKey]: {\r\n          ...ship,\r\n          health: ship.health -1\r\n        }\r\n      }\r\n      if (newShips[shipKey].health === 0) {\r\n        newShips[shipKey].isSunk = true;\r\n      }\r\n      return {\r\n        ...state,\r\n        players: {\r\n          ...state.players,\r\n          [opponent]: {\r\n            ...state.players[opponent],\r\n            ships: newShips,\r\n          }\r\n        }\r\n      }\r\n    }\r\n    case \"SEND_MESSAGE\": {\r\n      return {\r\n        ...state,\r\n        message: action.message\r\n      }\r\n    }\r\n    case \"SUNK_MESSAGE_SENT\": {\r\n      const { player: opponent, shipKey } = action;\r\n      const ship = state.players[opponent].ships[shipKey];\r\n      const newShips = {\r\n        ...state.players[opponent].ships,\r\n        [shipKey]: {\r\n          ...ship,\r\n          messageSent: true\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        players: {\r\n          ...state.players,\r\n          [opponent]: {\r\n            ...state.players[opponent],\r\n            ships: newShips,\r\n          }\r\n        }\r\n      }\r\n    }\r\n    case \"UPDATE_REMAINING_SHIPS\": {\r\n      const { player: opponent, value } = action;\r\n      return {\r\n        ...state,\r\n        players: {\r\n          ...state.players,\r\n          [opponent]:{\r\n            ...state.players[opponent],\r\n            remainingShips: state.players[opponent].remainingShips + value\r\n          }\r\n        }\r\n      };\r\n    }\r\n    case \"UPDATE_WINNER\": {\r\n      return {\r\n        ...state,\r\n        winner: action.winner\r\n      };\r\n    }\r\n    case \"GAME_START\": {\r\n      return {\r\n        ...state,\r\n        started: action.started\r\n      } \r\n    }\r\n    default:\r\n      console.log(\"BAD ACTION ID\")\r\n      console.error(\"BAD ACTION ID\")\r\n  }\r\n\r\n}\r\n\r\nexport default updatePlayerStates;","import React from 'react';\r\n\r\nconst Square = ({ clickable, handleClick, coordinate, position, ships, hideShips }) => {\r\n  // console.log()\r\n  const {shot, ship} = position;\r\n  let style = {}\r\n\r\n  if (!ship) {\r\n    if(shot) {\r\n      style['backgroundColor'] = 'gray';\r\n    } else {\r\n      style['backgroundColor'] = 'white';\r\n    }\r\n  } else if (ship) {\r\n    hideShips\r\n    ? style['backgroundColor'] = 'white'\r\n    : style['backgroundColor'] = 'blue';\r\n    if (shot) {\r\n      style['backgroundColor'] = 'red';\r\n      if (ships[ship].isSunk) {\r\n        style['backgroundColor'] = 'black';\r\n      }\r\n    }\r\n  }\r\n\r\n  if (clickable ===false || shot) {\r\n    style['pointerEvents'] = 'none';\r\n  }\r\n  \r\n  return (\r\n    <button\r\n      className=\"square\"\r\n      style={style}\r\n      onClick={() => handleClick(coordinate)}\r\n    >\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default Square;","import { memo } from 'react';\r\nimport Square from '../Square/Square';\r\n\r\nconst Board = (props) => {\r\n  const renderRow = (index) => {\r\n    const start = index * 10;\r\n    const rows = Array(10)\r\n    .fill(null)\r\n    .map((value, columnIndex) => {\r\n      const boardIndex = start+columnIndex;\r\n      return <Square \r\n        key={boardIndex}\r\n        coordinate={boardIndex}\r\n        handleClick={props.onClick}\r\n        clickable={props.clickable}\r\n        ships={props.ships}\r\n        position={props.gameboard[boardIndex]}\r\n        hideShips={props.hideShips}\r\n      />\r\n    })\r\n\r\n    return (\r\n      <div\r\n        key={index}\r\n        className=\"board-row\"\r\n      >\r\n        {rows}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"board\">\r\n      {/* {columns.map((value, index) => renderRow(value, index))} */}\r\n      {Array(10).fill(null).map((value, index) => renderRow(index))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default memo(Board);","import ShipTypes from '../Ship/ShipTypes';\r\n\r\nconst attackOpponent = () => ({\r\n  attack: (opponentsGameboard, coordinate) => {\r\n    if (opponentsGameboard.board[coordinate].shot === true) return;\r\n    return opponentsGameboard.recieveAttack(coordinate);\r\n  }\r\n})\r\n\r\nconst computerAttackOpponent = () => ({\r\n  computerAttack: (opponentsGameboard) => {\r\n    // let openSpots = opponentsGameboard.board.map((value, index) => {\r\n    //   if (value.shot || value.ship) {\r\n    //     return value;\r\n    //   }\r\n    //   return index;\r\n    // })\r\n    let openSpots = [];\r\n    for (let index in opponentsGameboard.board) {\r\n      if(!opponentsGameboard.board[index].shot) {\r\n        openSpots.push(Number(index))\r\n      }\r\n    }\r\n    const randomIndex = Math.floor(Math.random() * openSpots.length);\r\n    const randomAttack = openSpots[randomIndex]\r\n    return [attackOpponent().attack(opponentsGameboard, randomAttack), randomAttack]\r\n  },\r\n  randomOpenSpot: (opponentsGameboard) => {\r\n    let openSpots = [];\r\n    for (let index in opponentsGameboard) {\r\n      if(!opponentsGameboard[index].shot) {\r\n        openSpots.push(Number(index))\r\n      }\r\n    }\r\n    const randomIndex = Math.floor(Math.random() * openSpots.length);\r\n    const randomAttack = openSpots[randomIndex];\r\n    return randomAttack;\r\n  }\r\n\r\n})\r\n\r\n\r\nconst Player = (name) => {\r\n  const data = {\r\n    name,\r\n  }\r\n  return {\r\n    data,\r\n    ...attackOpponent(),\r\n    ...computerAttackOpponent(),\r\n  }\r\n}\r\n\r\nexport default Player;","import './App.css';\r\nimport ShipTypes from './factories/Ship/ShipTypes';\r\nimport updatePlayerStates from './utils/Playerstate/PlayerState'\r\nimport Board from './components/Board/Board';\r\nimport Player from './factories/Player/Player'\r\nimport Gameboard from './factories/Gameboard/Gameboard';\r\nimport { useState, useEffect, useReducer} from 'react';\r\n\r\n\r\n\r\nconst Game = () => {\r\n  const [ turn, setTurn ] = useState(0);\r\n  const [ canClick, setCanClick ] = useState(true);\r\n  const [ inventory, setInventory ] = useState(ShipTypes);\r\n  const [ game, setGame ] = useReducer(\r\n    updatePlayerStates,\r\n    {\r\n      players: {\r\n        computer: {\r\n          name: \"HAL900\",\r\n          board: Array(100).fill(null).map((value, index) =>({shot: false, ship: false})),\r\n          ships: {},\r\n          remainingShips: 0,\r\n        },\r\n        human: {\r\n          name: \"Joel\",\r\n          board: Array(100).fill(null).map((value, index) =>({shot: false, ship: false})),\r\n          ships: {},\r\n          remainingShips: 0,\r\n        },\r\n      },\r\n      message: 'Click on your opponents board to begin!',\r\n      winner: '',\r\n      started: false,\r\n    }\r\n  )\r\n\r\n  const shipSank = (player, ship) => {\r\n    const message = player === 'computer'\r\n      ? `Sank enemy ${ship}`\r\n      : `They sank my ${ship}`;\r\n    setGame({id: \"UPDATE_REMAINING_SHIPS\", player, value: -1})\r\n    setGame({id: \"SEND_MESSAGE\", message})\r\n    setGame({id: \"SUNK_MESSAGE_SENT\", player, shipKey: ship})\r\n  }\r\n\r\n  const attackCoordinate = (opponent, coordinate)=> {\r\n    const message = opponent === 'computer'\r\n      ? \"Hit Enemy Ship!\"\r\n      : \"Enemy hit my Ship!\";\r\n\r\n    setGame({id: \"ATTACK_SQUARE\", coordinate, opponent})\r\n    if (game.players[opponent].board[coordinate].ship) {\r\n      setGame({id: \"SEND_MESSAGE\", message})\r\n      setGame({id: \"ATTACK_SHIP\", coordinate, opponent})\r\n    } else {\r\n      setGame({id: \"SEND_MESSAGE\", message: \"Miss!\"})\r\n    }\r\n  }\r\n\r\n  const handleBoardClick = (coordinate) => {\r\n    if (game.winner) return;\r\n    attackCoordinate('computer', coordinate);\r\n    setCanClick(false);\r\n    setTimeout(() => {\r\n      setCanClick(true);\r\n      setTurn((turn) =>turn+1);\r\n    }, 1)\r\n  }\r\n\r\n  const placeShips = (coordinate) => {\r\n    if (game.started) return;\r\n    const newInventory = inventory.slice(1, inventory.length);\r\n    const ship = inventory[0];\r\n    const coordinates = [coordinate];\r\n    for (let i = 1; i < ship.length; i++) {\r\n      coordinates.push(coordinate + i)\r\n    }\r\n    if (!Gameboard.validPlacement(coordinates, game.players.human.board)) return;\r\n    setInventory(newInventory)\r\n    setGame({id: \"PLACE_SHIP\", player: 'human', name: ship.name, coordinates})\r\n    setGame({id: 'UPDATE_REMAINING_SHIPS', player: 'human', value: 1})\r\n    if (newInventory.length === 0) {\r\n      setGame({id: 'GAME_START', started: true})\r\n      setGame({id: \"SEND_MESSAGE\", message: 'Game Start!'})\r\n    }\r\n  }\r\n  \r\n  useEffect(() => {\r\n    if (inventory.length === 0) return;\r\n    const ship = inventory[0];\r\n    const coordinates = Gameboard.randomCoordinates(ship, game.players.computer.board);\r\n    setGame({id: \"PLACE_SHIP\", player: 'computer', name: ship.name, coordinates})\r\n    setGame({id: 'UPDATE_REMAINING_SHIPS', player: 'computer', value: 1})\r\n  },[inventory])\r\n  \r\n  useEffect(() => {\r\n    for (let shipKey in game.players.computer.ships) {\r\n      const ship = game.players.computer.ships[shipKey]\r\n      if (ship.isSunk && !ship.messageSent) {\r\n        shipSank('computer', shipKey);\r\n      }\r\n    }\r\n  },[game.players.computer.ships])\r\n  \r\n  useEffect(() => {\r\n    for (let shipKey in game.players.human.ships) {\r\n      const ship = game.players.human.ships[shipKey]\r\n      if (ship.isSunk && !ship.messageSent) {\r\n        shipSank('human', shipKey);\r\n      }\r\n    }\r\n  },[game.players.human.ships])\r\n\r\n  useEffect(() => {\r\n    // set turn to 1 to start? or have stages idk\r\n    if (!game.started|| game.winner) return;\r\n    const p = Player()\r\n    const coordinate = p.randomOpenSpot(game.players.human.board)\r\n    attackCoordinate('human', coordinate)\r\n  },[turn])\r\n\r\n  useEffect(() => {\r\n    if (turn < 1 || game.winner) return;\r\n    const { remainingShips:remainingComputerShips } = game.players.computer;\r\n    const { remainingShips:remainingHumanShips } = game.players.human;\r\n    if (remainingComputerShips === 0 || remainingHumanShips === 0) {\r\n      const winner = remainingComputerShips ? 'computer': 'human';\r\n      setGame({id: 'UPDATE_WINNER', winner})\r\n      setGame({id: 'SEND_MESSAGE', message: `${winner} wins!`})\r\n\r\n    }\r\n  },[game.players.computer.remainingShips, game.players.human.remainingShips])\r\n\r\n  \r\n  return (\r\n    <div>\r\n      <p>{game.message}</p>\r\n      <Board\r\n          gameboard={game.players.human.board}\r\n          ships={game.players.human.ships}\r\n          clickable={!game.started}\r\n          onClick={placeShips}\r\n      />\r\n      <Board\r\n          gameboard={game.players.computer.board}\r\n          onClick={handleBoardClick}\r\n          ships={game.players.computer.ships}\r\n          clickable={game.started && canClick}\r\n          hideShips={true}\r\n      />\r\n    </div>\r\n    );\r\n}\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Game />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}