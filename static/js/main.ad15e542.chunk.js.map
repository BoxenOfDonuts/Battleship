{"version":3,"sources":["factories/Ship/ShipTypes.js","factories/Gameboard/Gameboard.js","factories/Ship/Ship.js","utils/Playerstate/PlayerState.js","components/Square/Square.js","components/Board/Board.js","factories/Player/Player.js","App.js","reportWebVitals.js","index.js"],"names":["ShipTypes","name","length","Gameboard","validPlacement","coordinates","board","start","end","badPositions","forEach","value","index","ship","push","includes","placeShip","newBoard","data","positions","position","randomCoordinates","shipType","randomSpots","coordinate","Math","floor","random","i","console","log","isValid","direction","shot","shipInfo","isSunk","every","hits","getLength","isVertical","Ship","hit","shipAttacks","updatePlayerStates","state","action","id","shipPlacement","players","player","ships","health","leftEdge","rightEdge","opponent","shipKey","newShips","message","messageSent","remainingShips","winner","started","error","Square","handleClick","hideShips","classname","marker","hitShot","height","width","cx","cy","r","stroke","stroke-width","fill","className","onClick","Board","props","Array","map","rows","columnIndex","boardIndex","clickable","gameboard","renderRow","memo","Player","attack","opponentsGameboard","recieveAttack","computerAttack","openSpots","Number","randomAttack","attackOpponent","randomOpenSpot","Game","useState","turn","setTurn","canClick","setCanClick","inventory","setInventory","lastAttempt","setLastAttempt","useReducer","computer","human","game","setGame","shipSank","attackCoordinate","unshift","useEffect","sunk","prevState","remainingComputerShips","remainingHumanShips","newInventory","slice","setTimeout","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ad15e542.chunk.js","sourcesContent":["const ShipTypes = [\r\n  {\r\n    name: 'Carrier',\r\n    length: 5,\r\n  },\r\n  {\r\n    name: 'Battleship',\r\n    length: 4,\r\n  },\r\n  {\r\n    name: 'Destroyer',\r\n    length: 3,\r\n  },\r\n  {\r\n    name: 'Submarine',\r\n    length: 3,\r\n  },\r\n  {\r\n    name: 'Patrol Boat',\r\n    length: 2,\r\n  },\r\n]\r\n\r\nexport default ShipTypes","const Gameboard = (() => {\r\n  const placeShip = (ship, board) => {\r\n    \r\n    // Does not mutate the board, not sure which I want at this point\r\n    const newBoard = [...board]\r\n    for (let position of ship.data.positions) {\r\n      newBoard[position] = {...board[position], ship: ship.data.name}\r\n    }\r\n    return newBoard;\r\n\r\n  }\r\n\r\n  const validPlacement = (coordinates, board) => {\r\n    // const { positions } = ship.data;\r\n    const start = coordinates[0];\r\n    const end = coordinates[coordinates.length-1];\r\n    if (start % 10 === 9 || end % 10 < start % 10 ) {\r\n      return false;\r\n    }\r\n    // for too close to another ship \r\n    const badPositions = [];\r\n    board.forEach((value, index) => {\r\n      if (value.ship) {\r\n        badPositions.push(index, index-10, index+10);\r\n        if (!(index % 10 === 9)) {\r\n          badPositions.push(index+1, index+11, index-9)\r\n        }\r\n        if (!(index % 10 === 0)) {\r\n          badPositions.push(index-1, index-11, index+9)\r\n        }\r\n      }\r\n    })\r\n\r\n    for (const value of coordinates) {\r\n      if (badPositions.includes(value)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  const randomCoordinates = (shipType, board) => {\r\n    const randomSpots = (shipType) => {\r\n      const coordinate = Math.floor(Math.random() * 98)\r\n      const coordinates = [coordinate];\r\n      for (let i = 1; i < shipType.length; i++) {\r\n        coordinates.push(coordinate + i);\r\n      }\r\n      return coordinates;\r\n    }\r\n    let coordinates = randomSpots(shipType);\r\n    while(!validPlacement(coordinates, board)) {\r\n        coordinates = randomSpots(shipType);\r\n        console.log('this shouldnt go a lot')\r\n    }\r\n\r\n    return coordinates;\r\n  }\r\n\r\n  const isValid = (board, position, direction) => {\r\n    console.log(board[position + direction])\r\n    if (board[position + direction].shot) {\r\n      return false\r\n    }\r\n    return true;\r\n  }\r\n\r\n  return { placeShip, validPlacement, randomCoordinates, isValid }\r\n})();\r\n\r\nexport default Gameboard;","// const shipInfo = (data) => ({\r\n//   isSunk: () => data.positions.every(position => data.hits.includes(position)),\r\n//   getLength: () => data.positions.length,\r\n//   isVertical: () => data.isVertical,\r\n// })\r\n\r\n// const shipAttacks = (data) => ({\r\n//   // hit isn't validating, expecting gameboard to manage that\r\n//   hit: (position) => {\r\n//     data.hits.push(position);\r\n//     data.isSunk = shipInfo(data).isSunk()\r\n//     // return data.name;\r\n//   },\r\n// })\r\n\r\n\r\n// const Ship = (name, positions) => {\r\n//   const data = {\r\n//     name,\r\n//     positions,\r\n//     hits: [],\r\n//     isSunk: false\r\n//   }\r\n\r\n//   return {\r\n//     data,\r\n//     ...shipAttacks(data),\r\n//     ...shipInfo(data),\r\n//   }\r\n// }\r\n\r\nconst shipInfo = (data) => ({\r\n  isSunk: () => data.positions.every(position => data.hits.includes(position)),\r\n  getLength: () => data.positions.length,\r\n  isVertical: () => data.isVertical,\r\n})\r\n\r\nconst shipAttacks = (data) => ({\r\n  // hit isn't validating, expecting gameboard to manage that\r\n  hit: (position) => {\r\n    data.hits.push(position);\r\n    data.isSunk = shipInfo(data).isSunk()\r\n    // return data.name;\r\n  },\r\n})\r\n\r\n\r\nconst Ship = (name, positions) => {\r\n  const data = {\r\n    name,\r\n    positions,\r\n  }\r\n\r\n  return {\r\n    data,\r\n    ...shipAttacks(data),\r\n    ...shipInfo(data),\r\n  }\r\n}\r\n\r\nexport default Ship;","import Gameboard from '../../factories/Gameboard/Gameboard';\r\nimport Ship from '../../factories/Ship/Ship';\r\n\r\nconst updatePlayerStates = (state, action) => {\r\n  switch (action.id) {\r\n    case \"PLACE_SHIP\": {\r\n               \r\n      const { name, coordinates } = action;\r\n      const ship = Ship(name, coordinates)\r\n      const shipPlacement = {\r\n        ...state.players[action.player].ships,\r\n        [ship.data.name]: {\r\n          name: name,\r\n          health: coordinates.length,\r\n          leftEdge: coordinates[0],\r\n          rightEdge: coordinates[coordinates.length -1],\r\n        }\r\n      }\r\n      const newBoard = Gameboard.placeShip(ship, state.players[action.player].board)\r\n      return {\r\n        ...state,\r\n        players: {\r\n          ...state.players,\r\n          [action.player]: {\r\n            ...state.players[action.player],\r\n            board: newBoard,\r\n            ships: shipPlacement\r\n          }\r\n        },\r\n      };\r\n    }\r\n    case \"ATTACK_SQUARE\": {\r\n      const {opponent, coordinate} = action;\r\n      const newBoard = [...state.players[opponent].board]\r\n      newBoard[coordinate].shot = true;\r\n      return {\r\n        ...state,\r\n        players: {\r\n          ...state.players,\r\n          [opponent]: {\r\n            ...state.players[opponent],\r\n            board: newBoard\r\n          }\r\n        }\r\n      }\r\n    }\r\n    case \"ATTACK_SHIP\": {\r\n      const {opponent, coordinate} = action;\r\n      const shipKey = state.players[opponent].board[coordinate].ship;\r\n      const ship = state.players[opponent].ships[shipKey];\r\n      const newShips = {\r\n        ...state.players[opponent].ships,\r\n        [shipKey]: {\r\n          ...ship,\r\n          health: ship.health -1\r\n        }\r\n      }\r\n      if (newShips[shipKey].health === 0) {\r\n        newShips[shipKey].isSunk = true;\r\n      }\r\n      return {\r\n        ...state,\r\n        players: {\r\n          ...state.players,\r\n          [opponent]: {\r\n            ...state.players[opponent],\r\n            ships: newShips,\r\n          }\r\n        }\r\n      }\r\n    }\r\n    case \"SEND_MESSAGE\": {\r\n      return {\r\n        ...state,\r\n        message: action.message\r\n      }\r\n    }\r\n    case \"SUNK_MESSAGE_SENT\": {\r\n      const { player: opponent, shipKey } = action;\r\n      const ship = state.players[opponent].ships[shipKey];\r\n      const newShips = {\r\n        ...state.players[opponent].ships,\r\n        [shipKey]: {\r\n          ...ship,\r\n          messageSent: true\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        players: {\r\n          ...state.players,\r\n          [opponent]: {\r\n            ...state.players[opponent],\r\n            ships: newShips,\r\n          }\r\n        }\r\n      }\r\n    }\r\n    case \"UPDATE_REMAINING_SHIPS\": {\r\n      const { player: opponent, value } = action;\r\n      return {\r\n        ...state,\r\n        players: {\r\n          ...state.players,\r\n          [opponent]:{\r\n            ...state.players[opponent],\r\n            remainingShips: state.players[opponent].remainingShips + value\r\n          }\r\n        }\r\n      };\r\n    }\r\n    case \"UPDATE_WINNER\": {\r\n      return {\r\n        ...state,\r\n        winner: action.winner\r\n      };\r\n    }\r\n    case \"GAME_START\": {\r\n      return {\r\n        ...state,\r\n        started: action.started\r\n      } \r\n    }\r\n    default:\r\n      console.log(\"BAD ACTION ID\")\r\n      console.error(\"BAD ACTION ID\")\r\n  }\r\n\r\n}\r\n\r\nexport default updatePlayerStates;","import React from 'react';\r\nimport './Square.css'\r\n\r\nconst Square = ({ handleClick, coordinate, position, ships, hideShips }) => {\r\n  const {shot, ship} = position;\r\n  let classname = 'square';\r\n  let marker = '';\r\n\r\n  const hitShot = <svg height=\"40\" width=\"40\">\r\n    <circle cx=\"20\" cy=\"20\" r=\"12\" stroke=\"black\" stroke-width=\"1\" fill=\"red\" />\r\n    </svg>\r\n  \r\n  const missedShot = <svg height=\"40\" width=\"40\">\r\n    <circle cx=\"20\" cy=\"20\" r=\"12\" stroke=\"black\" stroke-width=\"1\" fill=\"white\" />\r\n    </svg>\r\n\r\n  if (!ship && shot) {\r\n    // classname += ' miss';\r\n    marker = missedShot;\r\n  } else if (ship) {\r\n    hideShips && !shot\r\n    ? classname += ' hidden'\r\n    : classname += ' ship';\r\n    if (shot) {\r\n      // classname += ' hit';\r\n      marker = hitShot;\r\n      if (ships[ship].isSunk) {\r\n        classname += ' sunk';\r\n      }\r\n    }\r\n    if (coordinate === ships[ship].leftEdge) {\r\n      classname += ' left-edge'\r\n    } else if (coordinate === ships[ship].rightEdge) {\r\n      classname += ' right-edge';\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={classname}\r\n      onClick={() => handleClick(coordinate)}\r\n    >{marker}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Square;","import { memo } from 'react';\r\nimport Square from '../Square/Square';\r\n\r\nconst Board = (props) => {\r\n  const renderRow = (index) => {\r\n    const start = index * 10;\r\n    const rows = Array(10)\r\n    .fill(null)\r\n    .map((value, columnIndex) => {\r\n      const boardIndex = start+columnIndex;\r\n      return <Square \r\n        key={boardIndex}\r\n        coordinate={boardIndex}\r\n        handleClick={props.onClick}\r\n        clickable={props.clickable}\r\n        ships={props.ships}\r\n        position={props.gameboard[boardIndex]}\r\n        hideShips={props.hideShips}\r\n      />\r\n    })\r\n\r\n    return (\r\n      <div\r\n        key={index}\r\n        className=\"board-row\"\r\n      >\r\n        {rows}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"board\">\r\n      {/* {columns.map((value, index) => renderRow(value, index))} */}\r\n      {Array(10).fill(null).map((value, index) => renderRow(index))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default memo(Board);","const attackOpponent = () => ({\r\n  attack: (opponentsGameboard, coordinate) => {\r\n    if (opponentsGameboard.board[coordinate].shot === true) return;\r\n    return opponentsGameboard.recieveAttack(coordinate);\r\n  }\r\n})\r\n\r\nconst computerAttackOpponent = () => ({\r\n  computerAttack: (opponentsGameboard) => {\r\n    // let openSpots = opponentsGameboard.board.map((value, index) => {\r\n    //   if (value.shot || value.ship) {\r\n    //     return value;\r\n    //   }\r\n    //   return index;\r\n    // })\r\n    let openSpots = [];\r\n    for (let index in opponentsGameboard.board) {\r\n      if(!opponentsGameboard.board[index].shot) {\r\n        openSpots.push(Number(index))\r\n      }\r\n    }\r\n    const randomIndex = Math.floor(Math.random() * openSpots.length);\r\n    const randomAttack = openSpots[randomIndex]\r\n    return [attackOpponent().attack(opponentsGameboard, randomAttack), randomAttack]\r\n  },\r\n  randomOpenSpot: (opponentsGameboard) => {\r\n    let openSpots = [];\r\n    for (let index in opponentsGameboard) {\r\n      if(!opponentsGameboard[index].shot) {\r\n        openSpots.push(Number(index))\r\n      }\r\n    }\r\n    const randomIndex = Math.floor(Math.random() * openSpots.length);\r\n    const randomAttack = openSpots[randomIndex];\r\n    return randomAttack;\r\n  }\r\n\r\n})\r\n\r\n\r\nconst Player = (name) => {\r\n  const data = {\r\n    name,\r\n  }\r\n  return {\r\n    data,\r\n    ...attackOpponent(),\r\n    ...computerAttackOpponent(),\r\n  }\r\n}\r\n\r\nexport default Player;","import './App.css';\r\nimport ShipTypes from './factories/Ship/ShipTypes';\r\nimport updatePlayerStates from './utils/Playerstate/PlayerState'\r\nimport Board from './components/Board/Board';\r\nimport Player from './factories/Player/Player'\r\nimport Gameboard from './factories/Gameboard/Gameboard';\r\nimport { useState, useEffect, useReducer} from 'react';\r\n\r\n\r\n\r\nconst Game = () => {\r\n  const [ turn, setTurn ] = useState(0);\r\n  const [ canClick, setCanClick ] = useState(true);\r\n  const [ inventory, setInventory ] = useState(ShipTypes);\r\n  const [ lastAttempt, setLastAttempt ] = useState(\r\n    {\r\n      hit: false,\r\n      positions: [],\r\n      direction: -1\r\n    }\r\n  );\r\n  const [ game, setGame ] = useReducer(\r\n    updatePlayerStates,\r\n    {\r\n      players: {\r\n        computer: {\r\n          name: \"HAL900\",\r\n          board: Array(100).fill(null).map((value, index) =>({shot: false, ship: false})),\r\n          ships: {},\r\n          remainingShips: 0,\r\n        },\r\n        human: {\r\n          name: \"Joel\",\r\n          board: Array(100).fill(null).map((value, index) =>({shot: false, ship: false})),\r\n          ships: {},\r\n          remainingShips: 0,\r\n        },\r\n      },\r\n      message: 'Click on the board to place your ship',\r\n      winner: '',\r\n      started: false,\r\n    }\r\n  );\r\n  \r\n  const shipSank = (player, ship) => {\r\n    const message = player === 'computer'\r\n      ? `Sank enemy ${ship}`\r\n      : `They sank my ${ship}`;\r\n    setGame({id: \"UPDATE_REMAINING_SHIPS\", player, value: -1})\r\n    setGame({id: \"SEND_MESSAGE\", message})\r\n    setGame({id: \"SUNK_MESSAGE_SENT\", player, shipKey: ship})\r\n  }\r\n\r\n  const attackCoordinate = (opponent, coordinate)=> {\r\n    const message = opponent === 'computer'\r\n      ? \"Hit Enemy Ship!\"\r\n      : \"Enemy hit my Ship!\";\r\n\r\n    setGame({id: \"ATTACK_SQUARE\", coordinate, opponent})\r\n    if (game.players[opponent].board[coordinate].ship) {\r\n      if (opponent === 'human') {\r\n        const positions = lastAttempt.positions;\r\n        if (lastAttempt.direction === -1) {\r\n          positions.unshift(coordinate)\r\n        } else {\r\n          positions.unshift(coordinate)\r\n        }\r\n        setLastAttempt({...lastAttempt, hit: true, positions,})\r\n      }\r\n      setGame({id: \"SEND_MESSAGE\", message})\r\n      setGame({id: \"ATTACK_SHIP\", coordinate, opponent})\r\n    } else {\r\n      setGame({id: \"SEND_MESSAGE\", message: \"Miss!\"})\r\n      if (opponent === 'human') {\r\n        setLastAttempt({...lastAttempt, hit: false})\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleBoardClick = (coordinate) => {\r\n    if (game.winner) return;\r\n    attackCoordinate('computer', coordinate);\r\n    setCanClick(false);\r\n    setTimeout(() => {\r\n      setCanClick(true);\r\n      setTurn((turn) =>turn+1);\r\n    }, 1)\r\n  }\r\n\r\n  const placeShips = (coordinate) => {\r\n    if (game.started) return;\r\n    const newInventory = inventory.slice(1, inventory.length);\r\n    const ship = inventory[0];\r\n    const coordinates = [coordinate];\r\n    for (let i = 1; i < ship.length; i++) {\r\n      coordinates.push(coordinate + i)\r\n    }\r\n    if (!Gameboard.validPlacement(coordinates, game.players.human.board)) return;\r\n    setInventory(newInventory)\r\n    setGame({id: \"PLACE_SHIP\", player: 'human', name: ship.name, coordinates})\r\n    setGame({id: 'UPDATE_REMAINING_SHIPS', player: 'human', value: 1})\r\n    if (newInventory.length === 0) {\r\n      setGame({id: 'GAME_START', started: true})\r\n      setGame({id: \"SEND_MESSAGE\", message: 'Game Start!'})\r\n    }\r\n  }\r\n  \r\n  useEffect(() => {\r\n    // pass in previous state and can do it in a loop\r\n    if (game.started || inventory.length === 0) return;\r\n    const ship = inventory[0];\r\n    const coordinates = Gameboard.randomCoordinates(ship, game.players.computer.board);\r\n    setGame({id: \"PLACE_SHIP\", player: 'computer', name: ship.name, coordinates})\r\n    setGame({id: 'UPDATE_REMAINING_SHIPS', player: 'computer', value: 1})\r\n  },[inventory])\r\n  \r\n  useEffect(() => {\r\n    for (let shipKey in game.players.computer.ships) {\r\n      const ship = game.players.computer.ships[shipKey]\r\n      if (ship.isSunk && !ship.messageSent) {\r\n        shipSank('computer', shipKey);\r\n      }\r\n    }\r\n  },[game.players.computer.ships])\r\n  \r\n  useEffect(() => {\r\n    for (let shipKey in game.players.human.ships) {\r\n      const ship = game.players.human.ships[shipKey]\r\n      if (ship.isSunk && !ship.messageSent) {\r\n        shipSank('human', shipKey);\r\n        setLastAttempt({hit: false, positions: [], direction: -1, sunk:null})\r\n      }\r\n    }\r\n  },[game.players.human.ships])\r\n\r\n  useEffect(() => {\r\n    // set turn to 1 to start? or have stages idk\r\n    if (!game.started|| game.winner) return;\r\n    // check if last hit a ship if not random, if so use 'memory'\r\n    // I guess need to put this into a gameboard object?\r\n    if (lastAttempt.hit && lastAttempt.positions[0] % 10 !== 0 && Gameboard.isValid(game.players.human.board, lastAttempt.positions[0], lastAttempt.direction)) {\r\n      let coordinate = lastAttempt.positions[0];\r\n      coordinate = coordinate + lastAttempt.direction;\r\n      console.log(`last attempt hit, trying ${coordinate}`)\r\n      attackCoordinate('human', coordinate)\r\n    } else if (lastAttempt.positions.length > 0) {\r\n      let coordinate = lastAttempt.positions[lastAttempt.positions.length -1];\r\n      coordinate = coordinate + 1;\r\n      console.log(`last attemp missed, trying the other way... ${coordinate}`);\r\n      attackCoordinate('human', coordinate)\r\n      setLastAttempt((prevState) => ({...prevState, direction: 1}))\r\n    } else {\r\n      const p = Player()\r\n      const coordinate = p.randomOpenSpot(game.players.human.board)\r\n      attackCoordinate('human', coordinate)\r\n    }\r\n  },[turn])\r\n\r\n  useEffect(() => {\r\n    if (turn < 1 || game.winner) return;\r\n    const { remainingShips:remainingComputerShips } = game.players.computer;\r\n    const { remainingShips:remainingHumanShips } = game.players.human;\r\n    if (remainingComputerShips === 0 || remainingHumanShips === 0) {\r\n      const winner = remainingComputerShips ? 'computer': 'human';\r\n      setGame({id: 'UPDATE_WINNER', winner})\r\n      setGame({id: 'SEND_MESSAGE', message: `${winner} wins!`})\r\n\r\n    }\r\n  },[game.players.computer.remainingShips, game.players.human.remainingShips])\r\n\r\n  \r\n  return (\r\n    <div className=\"game\">\r\n      <p>{game.message}</p>\r\n      <div className=\"gameboard\">\r\n        <Board\r\n            gameboard={game.players.human.board}\r\n            ships={game.players.human.ships}\r\n            clickable={!game.started}\r\n            onClick={placeShips}\r\n        />\r\n        {game.started && <Board\r\n            gameboard={game.players.computer.board}\r\n            onClick={handleBoardClick}\r\n            ships={game.players.computer.ships}\r\n            clickable={game.started && canClick}\r\n            hideShips={false}\r\n        />}\r\n      </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Game />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}