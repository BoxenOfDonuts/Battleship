{"version":3,"sources":["factories/Ship/ShipTypes.js","components/Square/Square.js","components/Board/Board.js","factories/Player/Player.js","factories/Gameboard/Gameboard.js","components/Header/Header.js","components/Messageboard/MessageBoard.js","factories/Ship/Ship.js","utils/Playerstate/PlayerState.js","App.js","reportWebVitals.js","index.js"],"names":["ShipTypes","name","length","Square","handleClick","handleHover","isHovering","coordinate","position","ships","hideShips","shot","ship","classname","marker","hitShot","height","width","cx","cy","r","stroke","strokeWidth","fill","missedShot","includes","isSunk","leftEdge","rightEdge","className","onMouseEnter","onClick","Board","props","clickable","Array","map","value","index","start","rows","columnIndex","boardIndex","gameboard","onHover","renderRow","memo","Player","data","attack","opponentsGameboard","board","recieveAttack","computerAttack","openSpots","push","Number","randomAttack","Math","floor","random","attackOpponent","randomOpenSpot","Gameboard","validPlacement","coordinates","end","badPositions","forEach","placeShip","newBoard","positions","randomCoordinates","shipType","loopCatch","randomSpots","i","console","log","isValid","direction","Header","header","headerArray","from","letter","MessageBoard","message","shipInfo","every","hits","getLength","isVertical","Ship","hit","shipAttacks","updatePlayerStates","state","action","id","shipPlacement","players","player","health","opponent","shipKey","newShips","messageSent","remainingShips","winner","started","init","error","computer","human","Game","useState","turn","setTurn","canClick","setCanClick","inventory","setInventory","setIsHovering","lastAttempt","setLastAttempt","useReducer","game","setGame","shipSank","attackCoordinate","unshift","useEffect","sunk","prevState","remainingComputerShips","remainingHumanShips","newInventory","slice","setTimeout","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.092833eb.chunk.js","sourcesContent":["const ShipTypes = [\r\n  {\r\n    name: 'Carrier',\r\n    length: 5,\r\n  },\r\n  {\r\n    name: 'Battleship',\r\n    length: 4,\r\n  },\r\n  {\r\n    name: 'Destroyer',\r\n    length: 3,\r\n  },\r\n  {\r\n    name: 'Submarine',\r\n    length: 3,\r\n  },\r\n  {\r\n    name: 'Patrol Boat',\r\n    length: 2,\r\n  },\r\n]\r\n\r\nexport default ShipTypes","import React from 'react';\r\nimport './Square.css';\r\n\r\nconst Square = ({ handleClick, handleHover, isHovering=[], coordinate, position, ships, hideShips }) => {\r\n  const {shot, ship} = position;\r\n  let classname = 'square';\r\n  let marker = '';\r\n\r\n  const hitShot = <svg height=\"40\" width=\"40\">\r\n    <circle cx=\"20\" cy=\"20\" r=\"12\" stroke=\"black\" strokeWidth=\"1\" fill=\"red\" />\r\n    </svg>\r\n  \r\n  const missedShot = <svg height=\"40\" width=\"40\">\r\n    <circle cx=\"20\" cy=\"20\" r=\"12\" stroke=\"black\" strokeWidth=\"1\" fill=\"white\" />\r\n    </svg>\r\n\r\n  if (isHovering) {\r\n    classname += isHovering.includes(coordinate)\r\n    ? ' hover-ship'\r\n    : '';\r\n  }\r\n\r\n  classname += shot\r\n  ? ' no-click'\r\n  : '';\r\n\r\n  if (ship) {\r\n    classname += hideShips && !ships[ship].isSunk\r\n      ? ' hidden'\r\n      : ' ship';\r\n    \r\n    classname += ships[ship].isSunk\r\n      ? ' sunk'\r\n      : '';\r\n    \r\n      marker = shot\r\n     ? hitShot\r\n     : '';\r\n    \r\n     if (coordinate === ships[ship].leftEdge) {\r\n       classname += ' left-edge'\r\n     } else if (coordinate === ships[ship].rightEdge) {\r\n       classname += ' right-edge';\r\n     }\r\n  } else {\r\n    marker = shot\r\n    ? missedShot\r\n    : '';\r\n  }\r\n\r\n  const hoverPositions = () => {\r\n    if (!handleHover) return;\r\n\r\n    handleHover(coordinate);\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={classname}\r\n      onMouseEnter={hoverPositions}\r\n      onClick={() => handleClick(coordinate)}\r\n    >{marker}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Square;","import { memo } from 'react';\r\nimport Square from '../Square/Square';\r\n\r\nconst Board = (props) => {\r\n  let classname = 'board';\r\n\r\n  classname += props.clickable\r\n    ? ''\r\n    : ' no-click';\r\n\r\n  const renderRow = (index) => {\r\n    const start = index * 10;\r\n    const rows = Array(10)\r\n    .fill(null)\r\n    .map((value, columnIndex) => {\r\n      const boardIndex = start+columnIndex;\r\n      return <Square\r\n        key={boardIndex}\r\n        coordinate={boardIndex}\r\n        handleClick={props.onClick}\r\n        clickable={props.clickable}\r\n        ships={props.ships}\r\n        position={props.gameboard[boardIndex]}\r\n        hideShips={props.hideShips}\r\n        handleHover={props.onHover}\r\n        isHovering={props.isHovering}\r\n      />\r\n    })\r\n\r\n    return (\r\n      <div\r\n        key={index}\r\n        className=\"board-row\"\r\n      >\r\n        {rows}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className={classname}>\r\n      {Array(10).fill(null).map((value, index) => renderRow(index))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default memo(Board);","const attackOpponent = () => ({\r\n  attack: (opponentsGameboard, coordinate) => {\r\n    if (opponentsGameboard.board[coordinate].shot === true) return;\r\n    return opponentsGameboard.recieveAttack(coordinate);\r\n  }\r\n})\r\n\r\nconst computerAttackOpponent = () => ({\r\n  computerAttack: (opponentsGameboard) => {\r\n    // let openSpots = opponentsGameboard.board.map((value, index) => {\r\n    //   if (value.shot || value.ship) {\r\n    //     return value;\r\n    //   }\r\n    //   return index;\r\n    // })\r\n    let openSpots = [];\r\n    for (let index in opponentsGameboard.board) {\r\n      if(!opponentsGameboard.board[index].shot) {\r\n        openSpots.push(Number(index))\r\n      }\r\n    }\r\n    const randomIndex = Math.floor(Math.random() * openSpots.length);\r\n    const randomAttack = openSpots[randomIndex]\r\n    return [attackOpponent().attack(opponentsGameboard, randomAttack), randomAttack]\r\n  },\r\n  randomOpenSpot: (opponentsGameboard) => {\r\n    let openSpots = [];\r\n    for (let index in opponentsGameboard) {\r\n      if(!opponentsGameboard[index].shot) {\r\n        openSpots.push(Number(index))\r\n      }\r\n    }\r\n    const randomIndex = Math.floor(Math.random() * openSpots.length);\r\n    const randomAttack = openSpots[randomIndex];\r\n    return randomAttack;\r\n  }\r\n\r\n})\r\n\r\n\r\nconst Player = (name) => {\r\n  const data = {\r\n    name,\r\n  }\r\n  return {\r\n    data,\r\n    ...attackOpponent(),\r\n    ...computerAttackOpponent(),\r\n  }\r\n}\r\n\r\nexport default Player;","const Gameboard = (() => {\r\n  const placeShip = (ship, board) => {\r\n    \r\n    // Does not mutate the board, not sure which I want at this point\r\n    const newBoard = [...board]\r\n    for (let position of ship.data.positions) {\r\n      newBoard[position] = {...board[position], ship: ship.data.name}\r\n    }\r\n    return newBoard;\r\n\r\n  }\r\n\r\n  const validPlacement = (coordinates, board) => {\r\n    // const { positions } = ship.data;\r\n    const start = coordinates[0];\r\n    const end = coordinates[coordinates.length-1];\r\n    if (start % 10 === 9 || end % 10 < start % 10 ) {\r\n      return false;\r\n    }\r\n    // for too close to another ship \r\n    const badPositions = [];\r\n    board.forEach((value, index) => {\r\n      if (value.ship) {\r\n        badPositions.push(index, index-10, index+10);\r\n        if (!(index % 10 === 9)) {\r\n          badPositions.push(index+1, index+11, index-9)\r\n        }\r\n        if (!(index % 10 === 0)) {\r\n          badPositions.push(index-1, index-11, index+9)\r\n        }\r\n      }\r\n    })\r\n\r\n    for (const value of coordinates) {\r\n      if (badPositions.includes(value)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  const randomCoordinates = (shipType, board) => {\r\n    let loopCatch = 0;\r\n    const randomSpots = (shipType) => {\r\n      const coordinate = Math.floor(Math.random() * 98)\r\n      const coordinates = [coordinate];\r\n      for (let i = 1; i < shipType.length; i++) {\r\n        coordinates.push(coordinate + i);\r\n      }\r\n      return coordinates;\r\n    }\r\n    let coordinates = randomSpots(shipType);\r\n    while(!validPlacement(coordinates, board) && loopCatch < 11) {\r\n        coordinates = randomSpots(shipType);\r\n        loopCatch++;\r\n        console.log('this shouldnt go a lot')\r\n    }\r\n\r\n    return coordinates;\r\n  }\r\n\r\n  const isValid = (board, position, direction) => {\r\n    console.log(board[position + direction])\r\n    if (board[position + direction].shot) {\r\n      return false\r\n    }\r\n    return true;\r\n  }\r\n\r\n  return { placeShip, validPlacement, randomCoordinates, isValid }\r\n})();\r\n\r\nexport default Gameboard;","import './Header.css';\r\n\r\nconst Header = ({ header }) => {\r\n  const headerArray = Array.from(header).map((letter,index) => {\r\n  return <span key={letter+index}>{letter}</span>\r\n  });\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <h1>\r\n        {headerArray}\r\n      </h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;","import './MessageBoard.css';\r\n\r\nconst MessageBoard = ({ message }) => {\r\n  return (\r\n    <div className=\"messages\">\r\n      <p>{message}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MessageBoard","// const shipInfo = (data) => ({\r\n//   isSunk: () => data.positions.every(position => data.hits.includes(position)),\r\n//   getLength: () => data.positions.length,\r\n//   isVertical: () => data.isVertical,\r\n// })\r\n\r\n// const shipAttacks = (data) => ({\r\n//   // hit isn't validating, expecting gameboard to manage that\r\n//   hit: (position) => {\r\n//     data.hits.push(position);\r\n//     data.isSunk = shipInfo(data).isSunk()\r\n//     // return data.name;\r\n//   },\r\n// })\r\n\r\n\r\n// const Ship = (name, positions) => {\r\n//   const data = {\r\n//     name,\r\n//     positions,\r\n//     hits: [],\r\n//     isSunk: false\r\n//   }\r\n\r\n//   return {\r\n//     data,\r\n//     ...shipAttacks(data),\r\n//     ...shipInfo(data),\r\n//   }\r\n// }\r\n\r\nconst shipInfo = (data) => ({\r\n  isSunk: () => data.positions.every(position => data.hits.includes(position)),\r\n  getLength: () => data.positions.length,\r\n  isVertical: () => data.isVertical,\r\n})\r\n\r\nconst shipAttacks = (data) => ({\r\n  // hit isn't validating, expecting gameboard to manage that\r\n  hit: (position) => {\r\n    data.hits.push(position);\r\n    data.isSunk = shipInfo(data).isSunk()\r\n    // return data.name;\r\n  },\r\n})\r\n\r\n\r\nconst Ship = (name, positions) => {\r\n  const data = {\r\n    name,\r\n    positions,\r\n  }\r\n\r\n  return {\r\n    data,\r\n    ...shipAttacks(data),\r\n    ...shipInfo(data),\r\n  }\r\n}\r\n\r\nexport default Ship;","import Gameboard from '../../factories/Gameboard/Gameboard';\r\nimport Ship from '../../factories/Ship/Ship';\r\n\r\nconst updatePlayerStates = (state, action) => {\r\n  switch (action.id) {\r\n    case \"PLACE_SHIP\": {\r\n               \r\n      const { name, coordinates } = action;\r\n      const ship = Ship(name, coordinates)\r\n      const shipPlacement = {\r\n        ...state.players[action.player].ships,\r\n        [ship.data.name]: {\r\n          name: name,\r\n          health: coordinates.length,\r\n          leftEdge: coordinates[0],\r\n          rightEdge: coordinates[coordinates.length -1],\r\n        }\r\n      }\r\n      const newBoard = Gameboard.placeShip(ship, state.players[action.player].board)\r\n      return {\r\n        ...state,\r\n        players: {\r\n          ...state.players,\r\n          [action.player]: {\r\n            ...state.players[action.player],\r\n            board: newBoard,\r\n            ships: shipPlacement\r\n          }\r\n        },\r\n      };\r\n    }\r\n    case \"ATTACK_SQUARE\": {\r\n      const {opponent, coordinate} = action;\r\n      const newBoard = [...state.players[opponent].board]\r\n      newBoard[coordinate].shot = true;\r\n      return {\r\n        ...state,\r\n        players: {\r\n          ...state.players,\r\n          [opponent]: {\r\n            ...state.players[opponent],\r\n            board: newBoard\r\n          }\r\n        }\r\n      }\r\n    }\r\n    case \"ATTACK_SHIP\": {\r\n      const {opponent, coordinate} = action;\r\n      const shipKey = state.players[opponent].board[coordinate].ship;\r\n      const ship = state.players[opponent].ships[shipKey];\r\n      const newShips = {\r\n        ...state.players[opponent].ships,\r\n        [shipKey]: {\r\n          ...ship,\r\n          health: ship.health -1\r\n        }\r\n      }\r\n      if (newShips[shipKey].health === 0) {\r\n        newShips[shipKey].isSunk = true;\r\n      }\r\n      return {\r\n        ...state,\r\n        players: {\r\n          ...state.players,\r\n          [opponent]: {\r\n            ...state.players[opponent],\r\n            ships: newShips,\r\n          }\r\n        }\r\n      }\r\n    }\r\n    case \"SEND_MESSAGE\": {\r\n      return {\r\n        ...state,\r\n        message: action.message\r\n      }\r\n    }\r\n    case \"SUNK_MESSAGE_SENT\": {\r\n      const { player: opponent, shipKey } = action;\r\n      const ship = state.players[opponent].ships[shipKey];\r\n      const newShips = {\r\n        ...state.players[opponent].ships,\r\n        [shipKey]: {\r\n          ...ship,\r\n          messageSent: true\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        players: {\r\n          ...state.players,\r\n          [opponent]: {\r\n            ...state.players[opponent],\r\n            ships: newShips,\r\n          }\r\n        }\r\n      }\r\n    }\r\n    case \"UPDATE_REMAINING_SHIPS\": {\r\n      const { player: opponent, value } = action;\r\n      return {\r\n        ...state,\r\n        players: {\r\n          ...state.players,\r\n          [opponent]:{\r\n            ...state.players[opponent],\r\n            remainingShips: state.players[opponent].remainingShips + value\r\n          }\r\n        }\r\n      };\r\n    }\r\n    case \"UPDATE_WINNER\": {\r\n      return {\r\n        ...state,\r\n        winner: action.winner\r\n      };\r\n    }\r\n    case \"GAME_START\": {\r\n      return {\r\n        ...state,\r\n        started: action.started\r\n      } \r\n    }\r\n    case \"RESET\": {\r\n      return init()\r\n    }\r\n    default:\r\n      console.log(\"BAD ACTION ID\")\r\n      console.error(\"BAD ACTION ID\")\r\n  }\r\n\r\n}\r\n\r\nconst init = () => {\r\n  const initialState = {\r\n    players: {\r\n      computer: {\r\n        name: \"HAL900\",\r\n        board: Array(100).fill(null).map((value, index) =>({shot: false, ship: false})),\r\n        ships: {},\r\n        remainingShips: 0,\r\n      },\r\n      human: {\r\n        name: \"Player\",\r\n        board: Array(100).fill(null).map((value, index) =>({shot: false, ship: false})),\r\n        ships: {},\r\n        remainingShips: 0,\r\n      },\r\n    },\r\n    message: 'Click on the board to place your ships',\r\n    winner: '',\r\n    started: false,\r\n  }\r\n  return initialState\r\n}\r\n\r\n\r\nexport { updatePlayerStates, init };","import './App.css';\r\nimport ShipTypes from './factories/Ship/ShipTypes';\r\nimport Board from './components/Board/Board';\r\nimport Player from './factories/Player/Player'\r\nimport Gameboard from './factories/Gameboard/Gameboard';\r\nimport Header from './components/Header/Header';\r\nimport MessageBoard from './components/Messageboard/MessageBoard';\r\nimport { updatePlayerStates, init } from './utils/Playerstate/PlayerState';\r\nimport { useState, useEffect, useReducer} from 'react';\r\n\r\nconst Game = () => {\r\n  const [ turn, setTurn ] = useState(0);\r\n  const [ canClick, setCanClick ] = useState(true);\r\n  const [ inventory, setInventory ] = useState(ShipTypes);\r\n  const [ isHovering, setIsHovering ] = useState([])\r\n  const [ lastAttempt, setLastAttempt ] = useState(\r\n    {\r\n      hit: false,\r\n      positions: [],\r\n      direction: -1\r\n    }\r\n  );\r\n  const [ game, setGame ] = useReducer(\r\n    updatePlayerStates,\r\n    init(),\r\n    init\r\n  );\r\n  \r\n  const shipSank = (player, ship) => {\r\n    const message = player === 'computer'\r\n      ? `Sank enemy ${ship}`\r\n      : `They sank my ${ship}`;\r\n    setGame({id: \"UPDATE_REMAINING_SHIPS\", player, value: -1})\r\n    setGame({id: \"SEND_MESSAGE\", message})\r\n    setGame({id: \"SUNK_MESSAGE_SENT\", player, shipKey: ship})\r\n  }\r\n\r\n  const attackCoordinate = (opponent, coordinate)=> {\r\n    const message = opponent === 'computer'\r\n      ? \"Hit Enemy Ship!\"\r\n      : \"Enemy hit my Ship!\";\r\n\r\n    setGame({id: \"ATTACK_SQUARE\", coordinate, opponent})\r\n    if (game.players[opponent].board[coordinate].ship) {\r\n      if (opponent === 'human') {\r\n        const positions = lastAttempt.positions;\r\n        if (lastAttempt.direction === -1) {\r\n          positions.unshift(coordinate)\r\n        } else {\r\n          positions.unshift(coordinate)\r\n        }\r\n        setLastAttempt({...lastAttempt, hit: true, positions,})\r\n      }\r\n      setGame({id: \"SEND_MESSAGE\", message})\r\n      setGame({id: \"ATTACK_SHIP\", coordinate, opponent})\r\n    } else {\r\n      setGame({id: \"SEND_MESSAGE\", message: \"Miss!\"})\r\n      if (opponent === 'human') {\r\n        setLastAttempt({...lastAttempt, hit: false})\r\n      }\r\n    }\r\n  }\r\n\r\n  const resetGame = () => {\r\n    setTurn(0);\r\n    setCanClick(true);\r\n    setInventory(ShipTypes);\r\n    setLastAttempt(\r\n      {\r\n        hit: false,\r\n        positions: [],\r\n        direction: -1\r\n      }\r\n    );\r\n    setGame({id: 'RESET'});\r\n  }\r\n\r\n  const handleBoardClick = (coordinate) => {\r\n    if (game.winner || game.players.computer.board[coordinate].shot) return;\r\n    attackCoordinate('computer', coordinate);\r\n    setCanClick(false);\r\n    setTimeout(() => {\r\n      setCanClick(true);\r\n      setTurn((turn) =>turn+1);\r\n    }, 1000)\r\n  }\r\n\r\n  const placeShips = (coordinate) => {\r\n    if (game.started) return;\r\n    const newInventory = inventory.slice(1, inventory.length);\r\n    const ship = inventory[0];\r\n    const coordinates = [coordinate];\r\n    for (let i = 1; i < ship.length; i++) {\r\n      coordinates.push(coordinate + i)\r\n    }\r\n    if (!Gameboard.validPlacement(coordinates, game.players.human.board)) return;\r\n    setInventory(newInventory)\r\n    setGame({id: \"PLACE_SHIP\", player: 'human', name: ship.name, coordinates})\r\n    setGame({id: 'UPDATE_REMAINING_SHIPS', player: 'human', value: 1})\r\n    if (newInventory.length === 0) {\r\n      setGame({id: 'GAME_START', started: true})\r\n      setGame({id: \"SEND_MESSAGE\", message: 'Game Start!'})\r\n      setIsHovering([]);\r\n    }\r\n  }\r\n\r\n  const handleHoverEffects = (coordinate) => {\r\n    if (game.started) return;\r\n    const ship = inventory[0];\r\n    const coordinates = [coordinate]\r\n    for (let i = 1; i < ship.length && (coordinate+i) % 10 !== 0; i++) {\r\n      coordinates.push(coordinate + i)\r\n    }\r\n    setIsHovering(coordinates);\r\n  }\r\n  \r\n  useEffect(() => {\r\n    if (game.started || inventory.length === 0) return;\r\n    const ship = inventory[0];\r\n    const coordinates = Gameboard.randomCoordinates(ship, game.players.computer.board);\r\n    setGame({id: \"PLACE_SHIP\", player: 'computer', name: ship.name, coordinates})\r\n    setGame({id: 'UPDATE_REMAINING_SHIPS', player: 'computer', value: 1})\r\n  },[inventory])\r\n  \r\n  useEffect(() => {\r\n    for (let shipKey in game.players.computer.ships) {\r\n      const ship = game.players.computer.ships[shipKey]\r\n      if (ship.isSunk && !ship.messageSent) {\r\n        shipSank('computer', shipKey);\r\n      }\r\n    }\r\n  },[game.players.computer.ships])\r\n  \r\n  useEffect(() => {\r\n    for (let shipKey in game.players.human.ships) {\r\n      const ship = game.players.human.ships[shipKey]\r\n      if (ship.isSunk && !ship.messageSent) {\r\n        shipSank('human', shipKey);\r\n        setLastAttempt({hit: false, positions: [], direction: -1, sunk:null})\r\n      }\r\n    }\r\n  },[game.players.human.ships])\r\n\r\n  useEffect(() => {\r\n    if (!game.started|| game.winner) return;\r\n    if (lastAttempt.hit && lastAttempt.positions[0] % 10 !== 0 && Gameboard.isValid(game.players.human.board, lastAttempt.positions[0], lastAttempt.direction)) {\r\n      let coordinate = lastAttempt.positions[0];\r\n      coordinate = coordinate + lastAttempt.direction;\r\n      console.log(`last attempt hit, trying ${coordinate}`)\r\n      attackCoordinate('human', coordinate)\r\n    } else if (lastAttempt.positions.length > 0) {\r\n      let coordinate = lastAttempt.positions[lastAttempt.positions.length -1];\r\n      coordinate = coordinate + 1;\r\n      console.log(`last attemp missed, trying the other way... ${coordinate}`);\r\n      attackCoordinate('human', coordinate)\r\n      setLastAttempt((prevState) => ({...prevState, direction: 1}))\r\n    } else {\r\n      const p = Player()\r\n      const coordinate = p.randomOpenSpot(game.players.human.board)\r\n      attackCoordinate('human', coordinate)\r\n    }\r\n  },[turn])\r\n\r\n  useEffect(() => {\r\n    if (turn < 1 || game.winner) return;\r\n    const { remainingShips:remainingComputerShips } = game.players.computer;\r\n    const { remainingShips:remainingHumanShips } = game.players.human;\r\n    if (remainingComputerShips === 0 || remainingHumanShips === 0) {\r\n      const winner = remainingComputerShips ? 'computer': 'human';\r\n      setGame({id: 'UPDATE_WINNER', winner})\r\n      setGame({id: 'SEND_MESSAGE', message: `${winner} wins!`})\r\n\r\n    }\r\n  },[game.players.computer.remainingShips, game.players.human.remainingShips])\r\n\r\n  \r\n  return (\r\n    <div className=\"game\">\r\n      <MessageBoard\r\n        message={game.message}\r\n      />\r\n      <div className=\"gameboard\">\r\n        <Board\r\n            gameboard={game.players.human.board}\r\n            ships={game.players.human.ships}\r\n            clickable={!game.started}\r\n            onClick={placeShips}\r\n            onHover={handleHoverEffects}\r\n            isHovering={isHovering}\r\n            \r\n        />\r\n        {game.started && <Board\r\n            gameboard={game.players.computer.board}\r\n            ships={game.players.computer.ships}\r\n            clickable={game.started && canClick}\r\n            onClick={handleBoardClick}\r\n            hideShips={true}\r\n        />}\r\n      </div>\r\n      {game.winner && <button onClick={resetGame}>\r\n          Replay?\r\n        </button>}\r\n    </div>\r\n    );\r\n}\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header header={'Battleship!'}/>\r\n      <Game />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}